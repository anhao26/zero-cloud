// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/anhao26/zero-cloud/service/ticket/ticket-rpc/ent/attributeset"
	"github.com/anhao26/zero-cloud/service/ticket/ticket-rpc/ent/predicate"
)

// AttributeSetUpdate is the builder for updating AttributeSet entities.
type AttributeSetUpdate struct {
	config
	hooks    []Hook
	mutation *AttributeSetMutation
}

// Where appends a list predicates to the AttributeSetUpdate builder.
func (asu *AttributeSetUpdate) Where(ps ...predicate.AttributeSet) *AttributeSetUpdate {
	asu.mutation.Where(ps...)
	return asu
}

// SetUpdatedAt sets the "updated_at" field.
func (asu *AttributeSetUpdate) SetUpdatedAt(t time.Time) *AttributeSetUpdate {
	asu.mutation.SetUpdatedAt(t)
	return asu
}

// SetEntityID sets the "entity_id" field.
func (asu *AttributeSetUpdate) SetEntityID(u uint64) *AttributeSetUpdate {
	asu.mutation.ResetEntityID()
	asu.mutation.SetEntityID(u)
	return asu
}

// AddEntityID adds u to the "entity_id" field.
func (asu *AttributeSetUpdate) AddEntityID(u int64) *AttributeSetUpdate {
	asu.mutation.AddEntityID(u)
	return asu
}

// SetAttributeSetName sets the "attribute_set_name" field.
func (asu *AttributeSetUpdate) SetAttributeSetName(s string) *AttributeSetUpdate {
	asu.mutation.SetAttributeSetName(s)
	return asu
}

// Mutation returns the AttributeSetMutation object of the builder.
func (asu *AttributeSetUpdate) Mutation() *AttributeSetMutation {
	return asu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (asu *AttributeSetUpdate) Save(ctx context.Context) (int, error) {
	asu.defaults()
	return withHooks(ctx, asu.sqlSave, asu.mutation, asu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asu *AttributeSetUpdate) SaveX(ctx context.Context) int {
	affected, err := asu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asu *AttributeSetUpdate) Exec(ctx context.Context) error {
	_, err := asu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asu *AttributeSetUpdate) ExecX(ctx context.Context) {
	if err := asu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asu *AttributeSetUpdate) defaults() {
	if _, ok := asu.mutation.UpdatedAt(); !ok {
		v := attributeset.UpdateDefaultUpdatedAt()
		asu.mutation.SetUpdatedAt(v)
	}
}

func (asu *AttributeSetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(attributeset.Table, attributeset.Columns, sqlgraph.NewFieldSpec(attributeset.FieldID, field.TypeUint64))
	if ps := asu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asu.mutation.UpdatedAt(); ok {
		_spec.SetField(attributeset.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := asu.mutation.EntityID(); ok {
		_spec.SetField(attributeset.FieldEntityID, field.TypeUint64, value)
	}
	if value, ok := asu.mutation.AddedEntityID(); ok {
		_spec.AddField(attributeset.FieldEntityID, field.TypeUint64, value)
	}
	if value, ok := asu.mutation.AttributeSetName(); ok {
		_spec.SetField(attributeset.FieldAttributeSetName, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, asu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attributeset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	asu.mutation.done = true
	return n, nil
}

// AttributeSetUpdateOne is the builder for updating a single AttributeSet entity.
type AttributeSetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AttributeSetMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (asuo *AttributeSetUpdateOne) SetUpdatedAt(t time.Time) *AttributeSetUpdateOne {
	asuo.mutation.SetUpdatedAt(t)
	return asuo
}

// SetEntityID sets the "entity_id" field.
func (asuo *AttributeSetUpdateOne) SetEntityID(u uint64) *AttributeSetUpdateOne {
	asuo.mutation.ResetEntityID()
	asuo.mutation.SetEntityID(u)
	return asuo
}

// AddEntityID adds u to the "entity_id" field.
func (asuo *AttributeSetUpdateOne) AddEntityID(u int64) *AttributeSetUpdateOne {
	asuo.mutation.AddEntityID(u)
	return asuo
}

// SetAttributeSetName sets the "attribute_set_name" field.
func (asuo *AttributeSetUpdateOne) SetAttributeSetName(s string) *AttributeSetUpdateOne {
	asuo.mutation.SetAttributeSetName(s)
	return asuo
}

// Mutation returns the AttributeSetMutation object of the builder.
func (asuo *AttributeSetUpdateOne) Mutation() *AttributeSetMutation {
	return asuo.mutation
}

// Where appends a list predicates to the AttributeSetUpdate builder.
func (asuo *AttributeSetUpdateOne) Where(ps ...predicate.AttributeSet) *AttributeSetUpdateOne {
	asuo.mutation.Where(ps...)
	return asuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (asuo *AttributeSetUpdateOne) Select(field string, fields ...string) *AttributeSetUpdateOne {
	asuo.fields = append([]string{field}, fields...)
	return asuo
}

// Save executes the query and returns the updated AttributeSet entity.
func (asuo *AttributeSetUpdateOne) Save(ctx context.Context) (*AttributeSet, error) {
	asuo.defaults()
	return withHooks(ctx, asuo.sqlSave, asuo.mutation, asuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asuo *AttributeSetUpdateOne) SaveX(ctx context.Context) *AttributeSet {
	node, err := asuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (asuo *AttributeSetUpdateOne) Exec(ctx context.Context) error {
	_, err := asuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asuo *AttributeSetUpdateOne) ExecX(ctx context.Context) {
	if err := asuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asuo *AttributeSetUpdateOne) defaults() {
	if _, ok := asuo.mutation.UpdatedAt(); !ok {
		v := attributeset.UpdateDefaultUpdatedAt()
		asuo.mutation.SetUpdatedAt(v)
	}
}

func (asuo *AttributeSetUpdateOne) sqlSave(ctx context.Context) (_node *AttributeSet, err error) {
	_spec := sqlgraph.NewUpdateSpec(attributeset.Table, attributeset.Columns, sqlgraph.NewFieldSpec(attributeset.FieldID, field.TypeUint64))
	id, ok := asuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AttributeSet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := asuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attributeset.FieldID)
		for _, f := range fields {
			if !attributeset.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != attributeset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := asuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asuo.mutation.UpdatedAt(); ok {
		_spec.SetField(attributeset.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := asuo.mutation.EntityID(); ok {
		_spec.SetField(attributeset.FieldEntityID, field.TypeUint64, value)
	}
	if value, ok := asuo.mutation.AddedEntityID(); ok {
		_spec.AddField(attributeset.FieldEntityID, field.TypeUint64, value)
	}
	if value, ok := asuo.mutation.AttributeSetName(); ok {
		_spec.SetField(attributeset.FieldAttributeSetName, field.TypeString, value)
	}
	_node = &AttributeSet{config: asuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, asuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attributeset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	asuo.mutation.done = true
	return _node, nil
}
