// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/anhao26/zero-cloud/service/ticket/ticket-rpc/ent/entity"
)

// EntityCreate is the builder for creating a Entity entity.
type EntityCreate struct {
	config
	mutation *EntityMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ec *EntityCreate) SetCreatedAt(t time.Time) *EntityCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *EntityCreate) SetNillableCreatedAt(t *time.Time) *EntityCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetUpdatedAt sets the "updated_at" field.
func (ec *EntityCreate) SetUpdatedAt(t time.Time) *EntityCreate {
	ec.mutation.SetUpdatedAt(t)
	return ec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ec *EntityCreate) SetNillableUpdatedAt(t *time.Time) *EntityCreate {
	if t != nil {
		ec.SetUpdatedAt(*t)
	}
	return ec
}

// SetEntityCode sets the "entity_code" field.
func (ec *EntityCreate) SetEntityCode(s string) *EntityCreate {
	ec.mutation.SetEntityCode(s)
	return ec
}

// SetEntityClass sets the "entity_class" field.
func (ec *EntityCreate) SetEntityClass(s string) *EntityCreate {
	ec.mutation.SetEntityClass(s)
	return ec
}

// SetEntityTable sets the "entity_table" field.
func (ec *EntityCreate) SetEntityTable(s string) *EntityCreate {
	ec.mutation.SetEntityTable(s)
	return ec
}

// SetDefaultAttributeSetID sets the "default_attribute_set_id" field.
func (ec *EntityCreate) SetDefaultAttributeSetID(u uint64) *EntityCreate {
	ec.mutation.SetDefaultAttributeSetID(u)
	return ec
}

// SetAdditionalAttributeTable sets the "additional_attribute_table" field.
func (ec *EntityCreate) SetAdditionalAttributeTable(s string) *EntityCreate {
	ec.mutation.SetAdditionalAttributeTable(s)
	return ec
}

// SetIsFlatEnabled sets the "is_flat_enabled" field.
func (ec *EntityCreate) SetIsFlatEnabled(u uint32) *EntityCreate {
	ec.mutation.SetIsFlatEnabled(u)
	return ec
}

// SetNillableIsFlatEnabled sets the "is_flat_enabled" field if the given value is not nil.
func (ec *EntityCreate) SetNillableIsFlatEnabled(u *uint32) *EntityCreate {
	if u != nil {
		ec.SetIsFlatEnabled(*u)
	}
	return ec
}

// SetID sets the "id" field.
func (ec *EntityCreate) SetID(u uint64) *EntityCreate {
	ec.mutation.SetID(u)
	return ec
}

// Mutation returns the EntityMutation object of the builder.
func (ec *EntityCreate) Mutation() *EntityMutation {
	return ec.mutation
}

// Save creates the Entity in the database.
func (ec *EntityCreate) Save(ctx context.Context) (*Entity, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EntityCreate) SaveX(ctx context.Context) *Entity {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EntityCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EntityCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EntityCreate) defaults() {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		v := entity.DefaultCreatedAt()
		ec.mutation.SetCreatedAt(v)
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		v := entity.DefaultUpdatedAt()
		ec.mutation.SetUpdatedAt(v)
	}
	if _, ok := ec.mutation.IsFlatEnabled(); !ok {
		v := entity.DefaultIsFlatEnabled
		ec.mutation.SetIsFlatEnabled(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EntityCreate) check() error {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Entity.created_at"`)}
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Entity.updated_at"`)}
	}
	if _, ok := ec.mutation.EntityCode(); !ok {
		return &ValidationError{Name: "entity_code", err: errors.New(`ent: missing required field "Entity.entity_code"`)}
	}
	if _, ok := ec.mutation.EntityClass(); !ok {
		return &ValidationError{Name: "entity_class", err: errors.New(`ent: missing required field "Entity.entity_class"`)}
	}
	if _, ok := ec.mutation.EntityTable(); !ok {
		return &ValidationError{Name: "entity_table", err: errors.New(`ent: missing required field "Entity.entity_table"`)}
	}
	if _, ok := ec.mutation.DefaultAttributeSetID(); !ok {
		return &ValidationError{Name: "default_attribute_set_id", err: errors.New(`ent: missing required field "Entity.default_attribute_set_id"`)}
	}
	if _, ok := ec.mutation.AdditionalAttributeTable(); !ok {
		return &ValidationError{Name: "additional_attribute_table", err: errors.New(`ent: missing required field "Entity.additional_attribute_table"`)}
	}
	if _, ok := ec.mutation.IsFlatEnabled(); !ok {
		return &ValidationError{Name: "is_flat_enabled", err: errors.New(`ent: missing required field "Entity.is_flat_enabled"`)}
	}
	return nil
}

func (ec *EntityCreate) sqlSave(ctx context.Context) (*Entity, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EntityCreate) createSpec() (*Entity, *sqlgraph.CreateSpec) {
	var (
		_node = &Entity{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(entity.Table, sqlgraph.NewFieldSpec(entity.FieldID, field.TypeUint64))
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(entity.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.SetField(entity.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ec.mutation.EntityCode(); ok {
		_spec.SetField(entity.FieldEntityCode, field.TypeString, value)
		_node.EntityCode = value
	}
	if value, ok := ec.mutation.EntityClass(); ok {
		_spec.SetField(entity.FieldEntityClass, field.TypeString, value)
		_node.EntityClass = value
	}
	if value, ok := ec.mutation.EntityTable(); ok {
		_spec.SetField(entity.FieldEntityTable, field.TypeString, value)
		_node.EntityTable = value
	}
	if value, ok := ec.mutation.DefaultAttributeSetID(); ok {
		_spec.SetField(entity.FieldDefaultAttributeSetID, field.TypeUint64, value)
		_node.DefaultAttributeSetID = value
	}
	if value, ok := ec.mutation.AdditionalAttributeTable(); ok {
		_spec.SetField(entity.FieldAdditionalAttributeTable, field.TypeString, value)
		_node.AdditionalAttributeTable = value
	}
	if value, ok := ec.mutation.IsFlatEnabled(); ok {
		_spec.SetField(entity.FieldIsFlatEnabled, field.TypeUint32, value)
		_node.IsFlatEnabled = value
	}
	return _node, _spec
}

// EntityCreateBulk is the builder for creating many Entity entities in bulk.
type EntityCreateBulk struct {
	config
	builders []*EntityCreate
}

// Save creates the Entity entities in the database.
func (ecb *EntityCreateBulk) Save(ctx context.Context) ([]*Entity, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Entity, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EntityCreateBulk) SaveX(ctx context.Context) []*Entity {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EntityCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EntityCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
