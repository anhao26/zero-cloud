// Code generated by ent, DO NOT EDIT.

package attributeset

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/anhao26/zero-cloud/service/ticket/ticket-rpc/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldEQ(FieldUpdatedAt, v))
}

// EntityID applies equality check predicate on the "entity_id" field. It's identical to EntityIDEQ.
func EntityID(v uint64) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldEQ(FieldEntityID, v))
}

// AttributeSetName applies equality check predicate on the "attribute_set_name" field. It's identical to AttributeSetNameEQ.
func AttributeSetName(v string) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldEQ(FieldAttributeSetName, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldLTE(FieldUpdatedAt, v))
}

// EntityIDEQ applies the EQ predicate on the "entity_id" field.
func EntityIDEQ(v uint64) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldEQ(FieldEntityID, v))
}

// EntityIDNEQ applies the NEQ predicate on the "entity_id" field.
func EntityIDNEQ(v uint64) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldNEQ(FieldEntityID, v))
}

// EntityIDIn applies the In predicate on the "entity_id" field.
func EntityIDIn(vs ...uint64) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldIn(FieldEntityID, vs...))
}

// EntityIDNotIn applies the NotIn predicate on the "entity_id" field.
func EntityIDNotIn(vs ...uint64) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldNotIn(FieldEntityID, vs...))
}

// EntityIDGT applies the GT predicate on the "entity_id" field.
func EntityIDGT(v uint64) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldGT(FieldEntityID, v))
}

// EntityIDGTE applies the GTE predicate on the "entity_id" field.
func EntityIDGTE(v uint64) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldGTE(FieldEntityID, v))
}

// EntityIDLT applies the LT predicate on the "entity_id" field.
func EntityIDLT(v uint64) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldLT(FieldEntityID, v))
}

// EntityIDLTE applies the LTE predicate on the "entity_id" field.
func EntityIDLTE(v uint64) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldLTE(FieldEntityID, v))
}

// AttributeSetNameEQ applies the EQ predicate on the "attribute_set_name" field.
func AttributeSetNameEQ(v string) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldEQ(FieldAttributeSetName, v))
}

// AttributeSetNameNEQ applies the NEQ predicate on the "attribute_set_name" field.
func AttributeSetNameNEQ(v string) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldNEQ(FieldAttributeSetName, v))
}

// AttributeSetNameIn applies the In predicate on the "attribute_set_name" field.
func AttributeSetNameIn(vs ...string) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldIn(FieldAttributeSetName, vs...))
}

// AttributeSetNameNotIn applies the NotIn predicate on the "attribute_set_name" field.
func AttributeSetNameNotIn(vs ...string) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldNotIn(FieldAttributeSetName, vs...))
}

// AttributeSetNameGT applies the GT predicate on the "attribute_set_name" field.
func AttributeSetNameGT(v string) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldGT(FieldAttributeSetName, v))
}

// AttributeSetNameGTE applies the GTE predicate on the "attribute_set_name" field.
func AttributeSetNameGTE(v string) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldGTE(FieldAttributeSetName, v))
}

// AttributeSetNameLT applies the LT predicate on the "attribute_set_name" field.
func AttributeSetNameLT(v string) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldLT(FieldAttributeSetName, v))
}

// AttributeSetNameLTE applies the LTE predicate on the "attribute_set_name" field.
func AttributeSetNameLTE(v string) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldLTE(FieldAttributeSetName, v))
}

// AttributeSetNameContains applies the Contains predicate on the "attribute_set_name" field.
func AttributeSetNameContains(v string) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldContains(FieldAttributeSetName, v))
}

// AttributeSetNameHasPrefix applies the HasPrefix predicate on the "attribute_set_name" field.
func AttributeSetNameHasPrefix(v string) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldHasPrefix(FieldAttributeSetName, v))
}

// AttributeSetNameHasSuffix applies the HasSuffix predicate on the "attribute_set_name" field.
func AttributeSetNameHasSuffix(v string) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldHasSuffix(FieldAttributeSetName, v))
}

// AttributeSetNameEqualFold applies the EqualFold predicate on the "attribute_set_name" field.
func AttributeSetNameEqualFold(v string) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldEqualFold(FieldAttributeSetName, v))
}

// AttributeSetNameContainsFold applies the ContainsFold predicate on the "attribute_set_name" field.
func AttributeSetNameContainsFold(v string) predicate.AttributeSet {
	return predicate.AttributeSet(sql.FieldContainsFold(FieldAttributeSetName, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AttributeSet) predicate.AttributeSet {
	return predicate.AttributeSet(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AttributeSet) predicate.AttributeSet {
	return predicate.AttributeSet(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AttributeSet) predicate.AttributeSet {
	return predicate.AttributeSet(func(s *sql.Selector) {
		p(s.Not())
	})
}
