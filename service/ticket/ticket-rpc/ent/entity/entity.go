// Code generated by ent, DO NOT EDIT.

package entity

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the entity type in the database.
	Label = "entity"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldEntityCode holds the string denoting the entity_code field in the database.
	FieldEntityCode = "entity_code"
	// FieldEntityClass holds the string denoting the entity_class field in the database.
	FieldEntityClass = "entity_class"
	// FieldEntityTable holds the string denoting the entity_table field in the database.
	FieldEntityTable = "entity_table"
	// FieldDefaultAttributeSetID holds the string denoting the default_attribute_set_id field in the database.
	FieldDefaultAttributeSetID = "default_attribute_set_id"
	// FieldAdditionalAttributeTable holds the string denoting the additional_attribute_table field in the database.
	FieldAdditionalAttributeTable = "additional_attribute_table"
	// FieldIsFlatEnabled holds the string denoting the is_flat_enabled field in the database.
	FieldIsFlatEnabled = "is_flat_enabled"
	// Table holds the table name of the entity in the database.
	Table = "entities"
)

// Columns holds all SQL columns for entity fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldEntityCode,
	FieldEntityClass,
	FieldEntityTable,
	FieldDefaultAttributeSetID,
	FieldAdditionalAttributeTable,
	FieldIsFlatEnabled,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultIsFlatEnabled holds the default value on creation for the "is_flat_enabled" field.
	DefaultIsFlatEnabled uint32
)

// OrderOption defines the ordering options for the Entity queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByEntityCode orders the results by the entity_code field.
func ByEntityCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntityCode, opts...).ToFunc()
}

// ByEntityClass orders the results by the entity_class field.
func ByEntityClass(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntityClass, opts...).ToFunc()
}

// ByEntityTable orders the results by the entity_table field.
func ByEntityTable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntityTable, opts...).ToFunc()
}

// ByDefaultAttributeSetID orders the results by the default_attribute_set_id field.
func ByDefaultAttributeSetID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDefaultAttributeSetID, opts...).ToFunc()
}

// ByAdditionalAttributeTable orders the results by the additional_attribute_table field.
func ByAdditionalAttributeTable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAdditionalAttributeTable, opts...).ToFunc()
}

// ByIsFlatEnabled orders the results by the is_flat_enabled field.
func ByIsFlatEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsFlatEnabled, opts...).ToFunc()
}
