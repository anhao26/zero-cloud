syntax = "proto3";

package ticket;
option go_package="./ticket";

message AttributeListReq {
  uint64 page = 1;
  uint64 page_size = 2;
  string attribute_code = 3;
  string backend_class = 4;
  string backend_type = 5;
}

//  base message
message Empty {}

message UUIDReq {
  string id = 1;
}

message BaseResp {
  string msg = 1;
}

message EntityInfo {
  uint64 id = 1;
  int64 created_at = 2;
  int64 updated_at = 3;
  string entity_code = 4;
  string entity_class = 5;
  string entity_table = 6;
  uint64 default_attribute_set_id = 7;
  string additional_attribute_table = 8;
  uint32 is_flat_enabled = 9;
}

message AttributeInfo {
  uint64 id = 1;
  int64 created_at = 2;
  int64 updated_at = 3;
  uint64 entity_id = 4;
  string attribute_code = 5;
  string backend_class = 6;
  string backend_type = 7;
  string backend_table = 8;
  string frontend_class = 9;
  string frontend_type = 10;
  string frontend_label = 11;
  string source_class = 12;
  string default_value = 13;
  uint32 is_filterable = 14;
  uint32 is_searchable = 15;
  uint32 is_required = 16;
  string required_validate_class = 17;
}

message PageInfoReq {
  uint64 page = 1;
  uint64 page_size = 2;
}

message EntityListResp {
  uint64 total = 1;
  repeated EntityInfo data = 2;
}

message IDsReq {
  repeated uint64 ids = 1;
}

message UUIDsReq {
  repeated string ids = 1;
}

message BaseUUIDResp {
  string id = 1;
  string msg = 2;
}

message IDReq {
  uint64 id = 1;
}

message BaseIDResp {
  uint64 id = 1;
  string msg = 2;
}

message EntityListReq {
  uint64 page = 1;
  uint64 page_size = 2;
  string entity_code = 3;
  string entity_class = 4;
  string entity_table = 5;
}

message AttributeListResp {
  uint64 total = 1;
  repeated AttributeInfo data = 2;
}

service Ticket {
  //  Attribute management
  //  group: attribute
  rpc createAttribute(AttributeInfo) returns (BaseIDResp);
  //  group: attribute
  rpc updateAttribute(AttributeInfo) returns (BaseResp);
  //  group: attribute
  rpc getAttributeList(AttributeListReq) returns (AttributeListResp);
  //  group: attribute
  rpc getAttributeById(IDReq) returns (AttributeInfo);
  //  group: attribute
  rpc deleteAttribute(IDsReq) returns (BaseResp);
  //  group: base
  rpc initDatabase(Empty) returns (BaseResp);
  //  Entity management
  //  group: entity
  rpc createEntity(EntityInfo) returns (BaseIDResp);
  //  group: entity
  rpc updateEntity(EntityInfo) returns (BaseResp);
  //  group: entity
  rpc getEntityList(EntityListReq) returns (EntityListResp);
  //  group: entity
  rpc getEntityById(IDReq) returns (EntityInfo);
  //  group: entity
  rpc deleteEntity(IDsReq) returns (BaseResp);
}

