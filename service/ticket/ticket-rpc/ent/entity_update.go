// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/anhao26/zero-cloud/service/ticket/ticket-rpc/ent/entity"
	"github.com/anhao26/zero-cloud/service/ticket/ticket-rpc/ent/predicate"
)

// EntityUpdate is the builder for updating Entity entities.
type EntityUpdate struct {
	config
	hooks    []Hook
	mutation *EntityMutation
}

// Where appends a list predicates to the EntityUpdate builder.
func (eu *EntityUpdate) Where(ps ...predicate.Entity) *EntityUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EntityUpdate) SetUpdatedAt(t time.Time) *EntityUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetEntityCode sets the "entity_code" field.
func (eu *EntityUpdate) SetEntityCode(s string) *EntityUpdate {
	eu.mutation.SetEntityCode(s)
	return eu
}

// SetEntityClass sets the "entity_class" field.
func (eu *EntityUpdate) SetEntityClass(s string) *EntityUpdate {
	eu.mutation.SetEntityClass(s)
	return eu
}

// SetEntityTable sets the "entity_table" field.
func (eu *EntityUpdate) SetEntityTable(s string) *EntityUpdate {
	eu.mutation.SetEntityTable(s)
	return eu
}

// SetDefaultAttributeSetID sets the "default_attribute_set_id" field.
func (eu *EntityUpdate) SetDefaultAttributeSetID(u uint64) *EntityUpdate {
	eu.mutation.ResetDefaultAttributeSetID()
	eu.mutation.SetDefaultAttributeSetID(u)
	return eu
}

// AddDefaultAttributeSetID adds u to the "default_attribute_set_id" field.
func (eu *EntityUpdate) AddDefaultAttributeSetID(u int64) *EntityUpdate {
	eu.mutation.AddDefaultAttributeSetID(u)
	return eu
}

// SetAdditionalAttributeTable sets the "additional_attribute_table" field.
func (eu *EntityUpdate) SetAdditionalAttributeTable(s string) *EntityUpdate {
	eu.mutation.SetAdditionalAttributeTable(s)
	return eu
}

// SetIsFlatEnabled sets the "is_flat_enabled" field.
func (eu *EntityUpdate) SetIsFlatEnabled(u uint32) *EntityUpdate {
	eu.mutation.ResetIsFlatEnabled()
	eu.mutation.SetIsFlatEnabled(u)
	return eu
}

// SetNillableIsFlatEnabled sets the "is_flat_enabled" field if the given value is not nil.
func (eu *EntityUpdate) SetNillableIsFlatEnabled(u *uint32) *EntityUpdate {
	if u != nil {
		eu.SetIsFlatEnabled(*u)
	}
	return eu
}

// AddIsFlatEnabled adds u to the "is_flat_enabled" field.
func (eu *EntityUpdate) AddIsFlatEnabled(u int32) *EntityUpdate {
	eu.mutation.AddIsFlatEnabled(u)
	return eu
}

// Mutation returns the EntityMutation object of the builder.
func (eu *EntityUpdate) Mutation() *EntityMutation {
	return eu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EntityUpdate) Save(ctx context.Context) (int, error) {
	eu.defaults()
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EntityUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EntityUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EntityUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EntityUpdate) defaults() {
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		v := entity.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
}

func (eu *EntityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(entity.Table, entity.Columns, sqlgraph.NewFieldSpec(entity.FieldID, field.TypeUint64))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(entity.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.EntityCode(); ok {
		_spec.SetField(entity.FieldEntityCode, field.TypeString, value)
	}
	if value, ok := eu.mutation.EntityClass(); ok {
		_spec.SetField(entity.FieldEntityClass, field.TypeString, value)
	}
	if value, ok := eu.mutation.EntityTable(); ok {
		_spec.SetField(entity.FieldEntityTable, field.TypeString, value)
	}
	if value, ok := eu.mutation.DefaultAttributeSetID(); ok {
		_spec.SetField(entity.FieldDefaultAttributeSetID, field.TypeUint64, value)
	}
	if value, ok := eu.mutation.AddedDefaultAttributeSetID(); ok {
		_spec.AddField(entity.FieldDefaultAttributeSetID, field.TypeUint64, value)
	}
	if value, ok := eu.mutation.AdditionalAttributeTable(); ok {
		_spec.SetField(entity.FieldAdditionalAttributeTable, field.TypeString, value)
	}
	if value, ok := eu.mutation.IsFlatEnabled(); ok {
		_spec.SetField(entity.FieldIsFlatEnabled, field.TypeUint32, value)
	}
	if value, ok := eu.mutation.AddedIsFlatEnabled(); ok {
		_spec.AddField(entity.FieldIsFlatEnabled, field.TypeUint32, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EntityUpdateOne is the builder for updating a single Entity entity.
type EntityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EntityMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EntityUpdateOne) SetUpdatedAt(t time.Time) *EntityUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetEntityCode sets the "entity_code" field.
func (euo *EntityUpdateOne) SetEntityCode(s string) *EntityUpdateOne {
	euo.mutation.SetEntityCode(s)
	return euo
}

// SetEntityClass sets the "entity_class" field.
func (euo *EntityUpdateOne) SetEntityClass(s string) *EntityUpdateOne {
	euo.mutation.SetEntityClass(s)
	return euo
}

// SetEntityTable sets the "entity_table" field.
func (euo *EntityUpdateOne) SetEntityTable(s string) *EntityUpdateOne {
	euo.mutation.SetEntityTable(s)
	return euo
}

// SetDefaultAttributeSetID sets the "default_attribute_set_id" field.
func (euo *EntityUpdateOne) SetDefaultAttributeSetID(u uint64) *EntityUpdateOne {
	euo.mutation.ResetDefaultAttributeSetID()
	euo.mutation.SetDefaultAttributeSetID(u)
	return euo
}

// AddDefaultAttributeSetID adds u to the "default_attribute_set_id" field.
func (euo *EntityUpdateOne) AddDefaultAttributeSetID(u int64) *EntityUpdateOne {
	euo.mutation.AddDefaultAttributeSetID(u)
	return euo
}

// SetAdditionalAttributeTable sets the "additional_attribute_table" field.
func (euo *EntityUpdateOne) SetAdditionalAttributeTable(s string) *EntityUpdateOne {
	euo.mutation.SetAdditionalAttributeTable(s)
	return euo
}

// SetIsFlatEnabled sets the "is_flat_enabled" field.
func (euo *EntityUpdateOne) SetIsFlatEnabled(u uint32) *EntityUpdateOne {
	euo.mutation.ResetIsFlatEnabled()
	euo.mutation.SetIsFlatEnabled(u)
	return euo
}

// SetNillableIsFlatEnabled sets the "is_flat_enabled" field if the given value is not nil.
func (euo *EntityUpdateOne) SetNillableIsFlatEnabled(u *uint32) *EntityUpdateOne {
	if u != nil {
		euo.SetIsFlatEnabled(*u)
	}
	return euo
}

// AddIsFlatEnabled adds u to the "is_flat_enabled" field.
func (euo *EntityUpdateOne) AddIsFlatEnabled(u int32) *EntityUpdateOne {
	euo.mutation.AddIsFlatEnabled(u)
	return euo
}

// Mutation returns the EntityMutation object of the builder.
func (euo *EntityUpdateOne) Mutation() *EntityMutation {
	return euo.mutation
}

// Where appends a list predicates to the EntityUpdate builder.
func (euo *EntityUpdateOne) Where(ps ...predicate.Entity) *EntityUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EntityUpdateOne) Select(field string, fields ...string) *EntityUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Entity entity.
func (euo *EntityUpdateOne) Save(ctx context.Context) (*Entity, error) {
	euo.defaults()
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EntityUpdateOne) SaveX(ctx context.Context) *Entity {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EntityUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EntityUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EntityUpdateOne) defaults() {
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		v := entity.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
}

func (euo *EntityUpdateOne) sqlSave(ctx context.Context) (_node *Entity, err error) {
	_spec := sqlgraph.NewUpdateSpec(entity.Table, entity.Columns, sqlgraph.NewFieldSpec(entity.FieldID, field.TypeUint64))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Entity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entity.FieldID)
		for _, f := range fields {
			if !entity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(entity.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.EntityCode(); ok {
		_spec.SetField(entity.FieldEntityCode, field.TypeString, value)
	}
	if value, ok := euo.mutation.EntityClass(); ok {
		_spec.SetField(entity.FieldEntityClass, field.TypeString, value)
	}
	if value, ok := euo.mutation.EntityTable(); ok {
		_spec.SetField(entity.FieldEntityTable, field.TypeString, value)
	}
	if value, ok := euo.mutation.DefaultAttributeSetID(); ok {
		_spec.SetField(entity.FieldDefaultAttributeSetID, field.TypeUint64, value)
	}
	if value, ok := euo.mutation.AddedDefaultAttributeSetID(); ok {
		_spec.AddField(entity.FieldDefaultAttributeSetID, field.TypeUint64, value)
	}
	if value, ok := euo.mutation.AdditionalAttributeTable(); ok {
		_spec.SetField(entity.FieldAdditionalAttributeTable, field.TypeString, value)
	}
	if value, ok := euo.mutation.IsFlatEnabled(); ok {
		_spec.SetField(entity.FieldIsFlatEnabled, field.TypeUint32, value)
	}
	if value, ok := euo.mutation.AddedIsFlatEnabled(); ok {
		_spec.AddField(entity.FieldIsFlatEnabled, field.TypeUint32, value)
	}
	_node = &Entity{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
