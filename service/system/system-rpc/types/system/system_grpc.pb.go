// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: system.proto

package system

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	System_CreateApi_FullMethodName               = "/system.System/createApi"
	System_UpdateApi_FullMethodName               = "/system.System/updateApi"
	System_GetApiList_FullMethodName              = "/system.System/getApiList"
	System_GetApiById_FullMethodName              = "/system.System/getApiById"
	System_DeleteApi_FullMethodName               = "/system.System/deleteApi"
	System_InitDatabase_FullMethodName            = "/system.System/initDatabase"
	System_CreateDepartment_FullMethodName        = "/system.System/createDepartment"
	System_UpdateDepartment_FullMethodName        = "/system.System/updateDepartment"
	System_GetDepartmentList_FullMethodName       = "/system.System/getDepartmentList"
	System_GetDepartmentById_FullMethodName       = "/system.System/getDepartmentById"
	System_DeleteDepartment_FullMethodName        = "/system.System/deleteDepartment"
	System_CreateDictionary_FullMethodName        = "/system.System/createDictionary"
	System_UpdateDictionary_FullMethodName        = "/system.System/updateDictionary"
	System_GetDictionaryList_FullMethodName       = "/system.System/getDictionaryList"
	System_GetDictionaryById_FullMethodName       = "/system.System/getDictionaryById"
	System_DeleteDictionary_FullMethodName        = "/system.System/deleteDictionary"
	System_CreateDictionaryDetail_FullMethodName  = "/system.System/createDictionaryDetail"
	System_UpdateDictionaryDetail_FullMethodName  = "/system.System/updateDictionaryDetail"
	System_GetDictionaryDetailList_FullMethodName = "/system.System/getDictionaryDetailList"
	System_GetDictionaryDetailById_FullMethodName = "/system.System/getDictionaryDetailById"
	System_DeleteDictionaryDetail_FullMethodName  = "/system.System/deleteDictionaryDetail"
	System_CreateMenu_FullMethodName              = "/system.System/createMenu"
	System_UpdateMenu_FullMethodName              = "/system.System/updateMenu"
	System_DeleteMenu_FullMethodName              = "/system.System/deleteMenu"
	System_GetMenuListByRole_FullMethodName       = "/system.System/getMenuListByRole"
	System_GetMenuList_FullMethodName             = "/system.System/getMenuList"
	System_CreateOauthProvider_FullMethodName     = "/system.System/createOauthProvider"
	System_UpdateOauthProvider_FullMethodName     = "/system.System/updateOauthProvider"
	System_GetOauthProviderList_FullMethodName    = "/system.System/getOauthProviderList"
	System_GetOauthProviderById_FullMethodName    = "/system.System/getOauthProviderById"
	System_DeleteOauthProvider_FullMethodName     = "/system.System/deleteOauthProvider"
	System_OauthLogin_FullMethodName              = "/system.System/oauthLogin"
	System_OauthCallback_FullMethodName           = "/system.System/oauthCallback"
	System_CreatePosition_FullMethodName          = "/system.System/createPosition"
	System_UpdatePosition_FullMethodName          = "/system.System/updatePosition"
	System_GetPositionList_FullMethodName         = "/system.System/getPositionList"
	System_GetPositionById_FullMethodName         = "/system.System/getPositionById"
	System_DeletePosition_FullMethodName          = "/system.System/deletePosition"
	System_CreateRole_FullMethodName              = "/system.System/createRole"
	System_UpdateRole_FullMethodName              = "/system.System/updateRole"
	System_GetRoleList_FullMethodName             = "/system.System/getRoleList"
	System_GetRoleById_FullMethodName             = "/system.System/getRoleById"
	System_DeleteRole_FullMethodName              = "/system.System/deleteRole"
	System_CreateToken_FullMethodName             = "/system.System/createToken"
	System_UpdateToken_FullMethodName             = "/system.System/updateToken"
	System_GetTokenList_FullMethodName            = "/system.System/getTokenList"
	System_GetTokenById_FullMethodName            = "/system.System/getTokenById"
	System_DeleteToken_FullMethodName             = "/system.System/deleteToken"
	System_BlockUserAllToken_FullMethodName       = "/system.System/blockUserAllToken"
	System_CreateUser_FullMethodName              = "/system.System/createUser"
	System_UpdateUser_FullMethodName              = "/system.System/updateUser"
	System_GetUserList_FullMethodName             = "/system.System/getUserList"
	System_GetUserById_FullMethodName             = "/system.System/getUserById"
	System_GetUserByUsername_FullMethodName       = "/system.System/getUserByUsername"
	System_DeleteUser_FullMethodName              = "/system.System/deleteUser"
)

// SystemClient is the client API for System service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemClient interface {
	// API management
	// group: api
	CreateApi(ctx context.Context, in *ApiInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: api
	UpdateApi(ctx context.Context, in *ApiInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// group: api
	GetApiList(ctx context.Context, in *ApiListReq, opts ...grpc.CallOption) (*ApiListResp, error)
	// group: api
	GetApiById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ApiInfo, error)
	// group: api
	DeleteApi(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: base
	InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
	// Department management
	// group: department
	CreateDepartment(ctx context.Context, in *DepartmentInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: department
	UpdateDepartment(ctx context.Context, in *DepartmentInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// group: department
	GetDepartmentList(ctx context.Context, in *DepartmentListReq, opts ...grpc.CallOption) (*DepartmentListResp, error)
	// group: department
	GetDepartmentById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*DepartmentInfo, error)
	// group: department
	DeleteDepartment(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	// Dictionary management
	// group: dictionary
	CreateDictionary(ctx context.Context, in *DictionaryInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: dictionary
	UpdateDictionary(ctx context.Context, in *DictionaryInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// group: dictionary
	GetDictionaryList(ctx context.Context, in *DictionaryListReq, opts ...grpc.CallOption) (*DictionaryListResp, error)
	// group: dictionary
	GetDictionaryById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*DictionaryInfo, error)
	// group: dictionary
	DeleteDictionary(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	// DictionaryDetail management
	// group: dictionarydetail
	CreateDictionaryDetail(ctx context.Context, in *DictionaryDetailInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: dictionarydetail
	UpdateDictionaryDetail(ctx context.Context, in *DictionaryDetailInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// group: dictionarydetail
	GetDictionaryDetailList(ctx context.Context, in *DictionaryDetailListReq, opts ...grpc.CallOption) (*DictionaryDetailListResp, error)
	// group: dictionarydetail
	GetDictionaryDetailById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*DictionaryDetailInfo, error)
	// group: dictionarydetail
	DeleteDictionaryDetail(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	// Menu management
	// group: menu
	CreateMenu(ctx context.Context, in *MenuInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: menu
	UpdateMenu(ctx context.Context, in *MenuInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// group: menu
	DeleteMenu(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: menu
	GetMenuListByRole(ctx context.Context, in *BaseMsg, opts ...grpc.CallOption) (*MenuInfoList, error)
	// group: menu
	GetMenuList(ctx context.Context, in *PageInfoReq, opts ...grpc.CallOption) (*MenuInfoList, error)
	// OauthProvider management
	// group: oauthprovider
	CreateOauthProvider(ctx context.Context, in *OauthProviderInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: oauthprovider
	UpdateOauthProvider(ctx context.Context, in *OauthProviderInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// group: oauthprovider
	GetOauthProviderList(ctx context.Context, in *OauthProviderListReq, opts ...grpc.CallOption) (*OauthProviderListResp, error)
	// group: oauthprovider
	GetOauthProviderById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*OauthProviderInfo, error)
	// group: oauthprovider
	DeleteOauthProvider(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: oauthprovider
	OauthLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*OauthRedirectResp, error)
	// group: oauthprovider
	OauthCallback(ctx context.Context, in *CallbackReq, opts ...grpc.CallOption) (*UserInfo, error)
	// Position management
	// group: position
	CreatePosition(ctx context.Context, in *PositionInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: position
	UpdatePosition(ctx context.Context, in *PositionInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// group: position
	GetPositionList(ctx context.Context, in *PositionListReq, opts ...grpc.CallOption) (*PositionListResp, error)
	// group: position
	GetPositionById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*PositionInfo, error)
	// group: position
	DeletePosition(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	// Role management
	// group: role
	CreateRole(ctx context.Context, in *RoleInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: role
	UpdateRole(ctx context.Context, in *RoleInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// group: role
	GetRoleList(ctx context.Context, in *RoleListReq, opts ...grpc.CallOption) (*RoleListResp, error)
	// group: role
	GetRoleById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*RoleInfo, error)
	// group: role
	DeleteRole(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	// Token management
	// group: token
	CreateToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error)
	// group: token
	UpdateToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// group: token
	GetTokenList(ctx context.Context, in *TokenListReq, opts ...grpc.CallOption) (*TokenListResp, error)
	// group: token
	GetTokenById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*TokenInfo, error)
	// group: token
	DeleteToken(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	// group: token
	BlockUserAllToken(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*BaseResp, error)
	// User management
	// group: user
	CreateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error)
	// group: user
	UpdateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// group: user
	GetUserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error)
	// group: user
	GetUserById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*UserInfo, error)
	// group: user
	GetUserByUsername(ctx context.Context, in *UsernameReq, opts ...grpc.CallOption) (*UserInfo, error)
	// group: user
	DeleteUser(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error)
}

type systemClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemClient(cc grpc.ClientConnInterface) SystemClient {
	return &systemClient{cc}
}

func (c *systemClient) CreateApi(ctx context.Context, in *ApiInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, System_CreateApi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) UpdateApi(ctx context.Context, in *ApiInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, System_UpdateApi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) GetApiList(ctx context.Context, in *ApiListReq, opts ...grpc.CallOption) (*ApiListResp, error) {
	out := new(ApiListResp)
	err := c.cc.Invoke(ctx, System_GetApiList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) GetApiById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ApiInfo, error) {
	out := new(ApiInfo)
	err := c.cc.Invoke(ctx, System_GetApiById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) DeleteApi(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, System_DeleteApi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, System_InitDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) CreateDepartment(ctx context.Context, in *DepartmentInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, System_CreateDepartment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) UpdateDepartment(ctx context.Context, in *DepartmentInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, System_UpdateDepartment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) GetDepartmentList(ctx context.Context, in *DepartmentListReq, opts ...grpc.CallOption) (*DepartmentListResp, error) {
	out := new(DepartmentListResp)
	err := c.cc.Invoke(ctx, System_GetDepartmentList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) GetDepartmentById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*DepartmentInfo, error) {
	out := new(DepartmentInfo)
	err := c.cc.Invoke(ctx, System_GetDepartmentById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) DeleteDepartment(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, System_DeleteDepartment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) CreateDictionary(ctx context.Context, in *DictionaryInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, System_CreateDictionary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) UpdateDictionary(ctx context.Context, in *DictionaryInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, System_UpdateDictionary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) GetDictionaryList(ctx context.Context, in *DictionaryListReq, opts ...grpc.CallOption) (*DictionaryListResp, error) {
	out := new(DictionaryListResp)
	err := c.cc.Invoke(ctx, System_GetDictionaryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) GetDictionaryById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*DictionaryInfo, error) {
	out := new(DictionaryInfo)
	err := c.cc.Invoke(ctx, System_GetDictionaryById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) DeleteDictionary(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, System_DeleteDictionary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) CreateDictionaryDetail(ctx context.Context, in *DictionaryDetailInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, System_CreateDictionaryDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) UpdateDictionaryDetail(ctx context.Context, in *DictionaryDetailInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, System_UpdateDictionaryDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) GetDictionaryDetailList(ctx context.Context, in *DictionaryDetailListReq, opts ...grpc.CallOption) (*DictionaryDetailListResp, error) {
	out := new(DictionaryDetailListResp)
	err := c.cc.Invoke(ctx, System_GetDictionaryDetailList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) GetDictionaryDetailById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*DictionaryDetailInfo, error) {
	out := new(DictionaryDetailInfo)
	err := c.cc.Invoke(ctx, System_GetDictionaryDetailById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) DeleteDictionaryDetail(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, System_DeleteDictionaryDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) CreateMenu(ctx context.Context, in *MenuInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, System_CreateMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) UpdateMenu(ctx context.Context, in *MenuInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, System_UpdateMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) DeleteMenu(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, System_DeleteMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) GetMenuListByRole(ctx context.Context, in *BaseMsg, opts ...grpc.CallOption) (*MenuInfoList, error) {
	out := new(MenuInfoList)
	err := c.cc.Invoke(ctx, System_GetMenuListByRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) GetMenuList(ctx context.Context, in *PageInfoReq, opts ...grpc.CallOption) (*MenuInfoList, error) {
	out := new(MenuInfoList)
	err := c.cc.Invoke(ctx, System_GetMenuList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) CreateOauthProvider(ctx context.Context, in *OauthProviderInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, System_CreateOauthProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) UpdateOauthProvider(ctx context.Context, in *OauthProviderInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, System_UpdateOauthProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) GetOauthProviderList(ctx context.Context, in *OauthProviderListReq, opts ...grpc.CallOption) (*OauthProviderListResp, error) {
	out := new(OauthProviderListResp)
	err := c.cc.Invoke(ctx, System_GetOauthProviderList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) GetOauthProviderById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*OauthProviderInfo, error) {
	out := new(OauthProviderInfo)
	err := c.cc.Invoke(ctx, System_GetOauthProviderById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) DeleteOauthProvider(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, System_DeleteOauthProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) OauthLogin(ctx context.Context, in *OauthLoginReq, opts ...grpc.CallOption) (*OauthRedirectResp, error) {
	out := new(OauthRedirectResp)
	err := c.cc.Invoke(ctx, System_OauthLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) OauthCallback(ctx context.Context, in *CallbackReq, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, System_OauthCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) CreatePosition(ctx context.Context, in *PositionInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, System_CreatePosition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) UpdatePosition(ctx context.Context, in *PositionInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, System_UpdatePosition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) GetPositionList(ctx context.Context, in *PositionListReq, opts ...grpc.CallOption) (*PositionListResp, error) {
	out := new(PositionListResp)
	err := c.cc.Invoke(ctx, System_GetPositionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) GetPositionById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*PositionInfo, error) {
	out := new(PositionInfo)
	err := c.cc.Invoke(ctx, System_GetPositionById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) DeletePosition(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, System_DeletePosition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) CreateRole(ctx context.Context, in *RoleInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, System_CreateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) UpdateRole(ctx context.Context, in *RoleInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, System_UpdateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) GetRoleList(ctx context.Context, in *RoleListReq, opts ...grpc.CallOption) (*RoleListResp, error) {
	out := new(RoleListResp)
	err := c.cc.Invoke(ctx, System_GetRoleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) GetRoleById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*RoleInfo, error) {
	out := new(RoleInfo)
	err := c.cc.Invoke(ctx, System_GetRoleById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) DeleteRole(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, System_DeleteRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) CreateToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error) {
	out := new(BaseUUIDResp)
	err := c.cc.Invoke(ctx, System_CreateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) UpdateToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, System_UpdateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) GetTokenList(ctx context.Context, in *TokenListReq, opts ...grpc.CallOption) (*TokenListResp, error) {
	out := new(TokenListResp)
	err := c.cc.Invoke(ctx, System_GetTokenList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) GetTokenById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*TokenInfo, error) {
	out := new(TokenInfo)
	err := c.cc.Invoke(ctx, System_GetTokenById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) DeleteToken(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, System_DeleteToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) BlockUserAllToken(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, System_BlockUserAllToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) CreateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error) {
	out := new(BaseUUIDResp)
	err := c.cc.Invoke(ctx, System_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) UpdateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, System_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) GetUserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error) {
	out := new(UserListResp)
	err := c.cc.Invoke(ctx, System_GetUserList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) GetUserById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, System_GetUserById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) GetUserByUsername(ctx context.Context, in *UsernameReq, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, System_GetUserByUsername_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) DeleteUser(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, System_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemServer is the server API for System service.
// All implementations must embed UnimplementedSystemServer
// for forward compatibility
type SystemServer interface {
	// API management
	// group: api
	CreateApi(context.Context, *ApiInfo) (*BaseIDResp, error)
	// group: api
	UpdateApi(context.Context, *ApiInfo) (*BaseResp, error)
	// group: api
	GetApiList(context.Context, *ApiListReq) (*ApiListResp, error)
	// group: api
	GetApiById(context.Context, *IDReq) (*ApiInfo, error)
	// group: api
	DeleteApi(context.Context, *IDsReq) (*BaseResp, error)
	// group: base
	InitDatabase(context.Context, *Empty) (*BaseResp, error)
	// Department management
	// group: department
	CreateDepartment(context.Context, *DepartmentInfo) (*BaseIDResp, error)
	// group: department
	UpdateDepartment(context.Context, *DepartmentInfo) (*BaseResp, error)
	// group: department
	GetDepartmentList(context.Context, *DepartmentListReq) (*DepartmentListResp, error)
	// group: department
	GetDepartmentById(context.Context, *IDReq) (*DepartmentInfo, error)
	// group: department
	DeleteDepartment(context.Context, *IDsReq) (*BaseResp, error)
	// Dictionary management
	// group: dictionary
	CreateDictionary(context.Context, *DictionaryInfo) (*BaseIDResp, error)
	// group: dictionary
	UpdateDictionary(context.Context, *DictionaryInfo) (*BaseResp, error)
	// group: dictionary
	GetDictionaryList(context.Context, *DictionaryListReq) (*DictionaryListResp, error)
	// group: dictionary
	GetDictionaryById(context.Context, *IDReq) (*DictionaryInfo, error)
	// group: dictionary
	DeleteDictionary(context.Context, *IDsReq) (*BaseResp, error)
	// DictionaryDetail management
	// group: dictionarydetail
	CreateDictionaryDetail(context.Context, *DictionaryDetailInfo) (*BaseIDResp, error)
	// group: dictionarydetail
	UpdateDictionaryDetail(context.Context, *DictionaryDetailInfo) (*BaseResp, error)
	// group: dictionarydetail
	GetDictionaryDetailList(context.Context, *DictionaryDetailListReq) (*DictionaryDetailListResp, error)
	// group: dictionarydetail
	GetDictionaryDetailById(context.Context, *IDReq) (*DictionaryDetailInfo, error)
	// group: dictionarydetail
	DeleteDictionaryDetail(context.Context, *IDsReq) (*BaseResp, error)
	// Menu management
	// group: menu
	CreateMenu(context.Context, *MenuInfo) (*BaseIDResp, error)
	// group: menu
	UpdateMenu(context.Context, *MenuInfo) (*BaseResp, error)
	// group: menu
	DeleteMenu(context.Context, *IDReq) (*BaseResp, error)
	// group: menu
	GetMenuListByRole(context.Context, *BaseMsg) (*MenuInfoList, error)
	// group: menu
	GetMenuList(context.Context, *PageInfoReq) (*MenuInfoList, error)
	// OauthProvider management
	// group: oauthprovider
	CreateOauthProvider(context.Context, *OauthProviderInfo) (*BaseIDResp, error)
	// group: oauthprovider
	UpdateOauthProvider(context.Context, *OauthProviderInfo) (*BaseResp, error)
	// group: oauthprovider
	GetOauthProviderList(context.Context, *OauthProviderListReq) (*OauthProviderListResp, error)
	// group: oauthprovider
	GetOauthProviderById(context.Context, *IDReq) (*OauthProviderInfo, error)
	// group: oauthprovider
	DeleteOauthProvider(context.Context, *IDsReq) (*BaseResp, error)
	// group: oauthprovider
	OauthLogin(context.Context, *OauthLoginReq) (*OauthRedirectResp, error)
	// group: oauthprovider
	OauthCallback(context.Context, *CallbackReq) (*UserInfo, error)
	// Position management
	// group: position
	CreatePosition(context.Context, *PositionInfo) (*BaseIDResp, error)
	// group: position
	UpdatePosition(context.Context, *PositionInfo) (*BaseResp, error)
	// group: position
	GetPositionList(context.Context, *PositionListReq) (*PositionListResp, error)
	// group: position
	GetPositionById(context.Context, *IDReq) (*PositionInfo, error)
	// group: position
	DeletePosition(context.Context, *IDsReq) (*BaseResp, error)
	// Role management
	// group: role
	CreateRole(context.Context, *RoleInfo) (*BaseIDResp, error)
	// group: role
	UpdateRole(context.Context, *RoleInfo) (*BaseResp, error)
	// group: role
	GetRoleList(context.Context, *RoleListReq) (*RoleListResp, error)
	// group: role
	GetRoleById(context.Context, *IDReq) (*RoleInfo, error)
	// group: role
	DeleteRole(context.Context, *IDsReq) (*BaseResp, error)
	// Token management
	// group: token
	CreateToken(context.Context, *TokenInfo) (*BaseUUIDResp, error)
	// group: token
	UpdateToken(context.Context, *TokenInfo) (*BaseResp, error)
	// group: token
	GetTokenList(context.Context, *TokenListReq) (*TokenListResp, error)
	// group: token
	GetTokenById(context.Context, *UUIDReq) (*TokenInfo, error)
	// group: token
	DeleteToken(context.Context, *UUIDsReq) (*BaseResp, error)
	// group: token
	BlockUserAllToken(context.Context, *UUIDReq) (*BaseResp, error)
	// User management
	// group: user
	CreateUser(context.Context, *UserInfo) (*BaseUUIDResp, error)
	// group: user
	UpdateUser(context.Context, *UserInfo) (*BaseResp, error)
	// group: user
	GetUserList(context.Context, *UserListReq) (*UserListResp, error)
	// group: user
	GetUserById(context.Context, *UUIDReq) (*UserInfo, error)
	// group: user
	GetUserByUsername(context.Context, *UsernameReq) (*UserInfo, error)
	// group: user
	DeleteUser(context.Context, *UUIDsReq) (*BaseResp, error)
	mustEmbedUnimplementedSystemServer()
}

// UnimplementedSystemServer must be embedded to have forward compatible implementations.
type UnimplementedSystemServer struct {
}

func (UnimplementedSystemServer) CreateApi(context.Context, *ApiInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApi not implemented")
}
func (UnimplementedSystemServer) UpdateApi(context.Context, *ApiInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApi not implemented")
}
func (UnimplementedSystemServer) GetApiList(context.Context, *ApiListReq) (*ApiListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiList not implemented")
}
func (UnimplementedSystemServer) GetApiById(context.Context, *IDReq) (*ApiInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiById not implemented")
}
func (UnimplementedSystemServer) DeleteApi(context.Context, *IDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApi not implemented")
}
func (UnimplementedSystemServer) InitDatabase(context.Context, *Empty) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDatabase not implemented")
}
func (UnimplementedSystemServer) CreateDepartment(context.Context, *DepartmentInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDepartment not implemented")
}
func (UnimplementedSystemServer) UpdateDepartment(context.Context, *DepartmentInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDepartment not implemented")
}
func (UnimplementedSystemServer) GetDepartmentList(context.Context, *DepartmentListReq) (*DepartmentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartmentList not implemented")
}
func (UnimplementedSystemServer) GetDepartmentById(context.Context, *IDReq) (*DepartmentInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartmentById not implemented")
}
func (UnimplementedSystemServer) DeleteDepartment(context.Context, *IDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDepartment not implemented")
}
func (UnimplementedSystemServer) CreateDictionary(context.Context, *DictionaryInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDictionary not implemented")
}
func (UnimplementedSystemServer) UpdateDictionary(context.Context, *DictionaryInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictionary not implemented")
}
func (UnimplementedSystemServer) GetDictionaryList(context.Context, *DictionaryListReq) (*DictionaryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionaryList not implemented")
}
func (UnimplementedSystemServer) GetDictionaryById(context.Context, *IDReq) (*DictionaryInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionaryById not implemented")
}
func (UnimplementedSystemServer) DeleteDictionary(context.Context, *IDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDictionary not implemented")
}
func (UnimplementedSystemServer) CreateDictionaryDetail(context.Context, *DictionaryDetailInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDictionaryDetail not implemented")
}
func (UnimplementedSystemServer) UpdateDictionaryDetail(context.Context, *DictionaryDetailInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictionaryDetail not implemented")
}
func (UnimplementedSystemServer) GetDictionaryDetailList(context.Context, *DictionaryDetailListReq) (*DictionaryDetailListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionaryDetailList not implemented")
}
func (UnimplementedSystemServer) GetDictionaryDetailById(context.Context, *IDReq) (*DictionaryDetailInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionaryDetailById not implemented")
}
func (UnimplementedSystemServer) DeleteDictionaryDetail(context.Context, *IDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDictionaryDetail not implemented")
}
func (UnimplementedSystemServer) CreateMenu(context.Context, *MenuInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenu not implemented")
}
func (UnimplementedSystemServer) UpdateMenu(context.Context, *MenuInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenu not implemented")
}
func (UnimplementedSystemServer) DeleteMenu(context.Context, *IDReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenu not implemented")
}
func (UnimplementedSystemServer) GetMenuListByRole(context.Context, *BaseMsg) (*MenuInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuListByRole not implemented")
}
func (UnimplementedSystemServer) GetMenuList(context.Context, *PageInfoReq) (*MenuInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuList not implemented")
}
func (UnimplementedSystemServer) CreateOauthProvider(context.Context, *OauthProviderInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOauthProvider not implemented")
}
func (UnimplementedSystemServer) UpdateOauthProvider(context.Context, *OauthProviderInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOauthProvider not implemented")
}
func (UnimplementedSystemServer) GetOauthProviderList(context.Context, *OauthProviderListReq) (*OauthProviderListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOauthProviderList not implemented")
}
func (UnimplementedSystemServer) GetOauthProviderById(context.Context, *IDReq) (*OauthProviderInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOauthProviderById not implemented")
}
func (UnimplementedSystemServer) DeleteOauthProvider(context.Context, *IDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOauthProvider not implemented")
}
func (UnimplementedSystemServer) OauthLogin(context.Context, *OauthLoginReq) (*OauthRedirectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OauthLogin not implemented")
}
func (UnimplementedSystemServer) OauthCallback(context.Context, *CallbackReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OauthCallback not implemented")
}
func (UnimplementedSystemServer) CreatePosition(context.Context, *PositionInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePosition not implemented")
}
func (UnimplementedSystemServer) UpdatePosition(context.Context, *PositionInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePosition not implemented")
}
func (UnimplementedSystemServer) GetPositionList(context.Context, *PositionListReq) (*PositionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPositionList not implemented")
}
func (UnimplementedSystemServer) GetPositionById(context.Context, *IDReq) (*PositionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPositionById not implemented")
}
func (UnimplementedSystemServer) DeletePosition(context.Context, *IDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePosition not implemented")
}
func (UnimplementedSystemServer) CreateRole(context.Context, *RoleInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedSystemServer) UpdateRole(context.Context, *RoleInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedSystemServer) GetRoleList(context.Context, *RoleListReq) (*RoleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleList not implemented")
}
func (UnimplementedSystemServer) GetRoleById(context.Context, *IDReq) (*RoleInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleById not implemented")
}
func (UnimplementedSystemServer) DeleteRole(context.Context, *IDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedSystemServer) CreateToken(context.Context, *TokenInfo) (*BaseUUIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (UnimplementedSystemServer) UpdateToken(context.Context, *TokenInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateToken not implemented")
}
func (UnimplementedSystemServer) GetTokenList(context.Context, *TokenListReq) (*TokenListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenList not implemented")
}
func (UnimplementedSystemServer) GetTokenById(context.Context, *UUIDReq) (*TokenInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenById not implemented")
}
func (UnimplementedSystemServer) DeleteToken(context.Context, *UUIDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteToken not implemented")
}
func (UnimplementedSystemServer) BlockUserAllToken(context.Context, *UUIDReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUserAllToken not implemented")
}
func (UnimplementedSystemServer) CreateUser(context.Context, *UserInfo) (*BaseUUIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedSystemServer) UpdateUser(context.Context, *UserInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedSystemServer) GetUserList(context.Context, *UserListReq) (*UserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserList not implemented")
}
func (UnimplementedSystemServer) GetUserById(context.Context, *UUIDReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedSystemServer) GetUserByUsername(context.Context, *UsernameReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByUsername not implemented")
}
func (UnimplementedSystemServer) DeleteUser(context.Context, *UUIDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedSystemServer) mustEmbedUnimplementedSystemServer() {}

// UnsafeSystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemServer will
// result in compilation errors.
type UnsafeSystemServer interface {
	mustEmbedUnimplementedSystemServer()
}

func RegisterSystemServer(s grpc.ServiceRegistrar, srv SystemServer) {
	s.RegisterService(&System_ServiceDesc, srv)
}

func _System_CreateApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).CreateApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_CreateApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).CreateApi(ctx, req.(*ApiInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_UpdateApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).UpdateApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_UpdateApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).UpdateApi(ctx, req.(*ApiInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_GetApiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).GetApiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_GetApiList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).GetApiList(ctx, req.(*ApiListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_GetApiById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).GetApiById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_GetApiById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).GetApiById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_DeleteApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).DeleteApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_DeleteApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).DeleteApi(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_InitDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).InitDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_InitDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).InitDatabase(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_CreateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).CreateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_CreateDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).CreateDepartment(ctx, req.(*DepartmentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_UpdateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).UpdateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_UpdateDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).UpdateDepartment(ctx, req.(*DepartmentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_GetDepartmentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).GetDepartmentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_GetDepartmentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).GetDepartmentList(ctx, req.(*DepartmentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_GetDepartmentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).GetDepartmentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_GetDepartmentById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).GetDepartmentById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_DeleteDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).DeleteDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_DeleteDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).DeleteDepartment(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_CreateDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictionaryInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).CreateDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_CreateDictionary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).CreateDictionary(ctx, req.(*DictionaryInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_UpdateDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictionaryInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).UpdateDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_UpdateDictionary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).UpdateDictionary(ctx, req.(*DictionaryInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_GetDictionaryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictionaryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).GetDictionaryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_GetDictionaryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).GetDictionaryList(ctx, req.(*DictionaryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_GetDictionaryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).GetDictionaryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_GetDictionaryById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).GetDictionaryById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_DeleteDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).DeleteDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_DeleteDictionary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).DeleteDictionary(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_CreateDictionaryDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictionaryDetailInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).CreateDictionaryDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_CreateDictionaryDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).CreateDictionaryDetail(ctx, req.(*DictionaryDetailInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_UpdateDictionaryDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictionaryDetailInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).UpdateDictionaryDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_UpdateDictionaryDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).UpdateDictionaryDetail(ctx, req.(*DictionaryDetailInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_GetDictionaryDetailList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictionaryDetailListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).GetDictionaryDetailList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_GetDictionaryDetailList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).GetDictionaryDetailList(ctx, req.(*DictionaryDetailListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_GetDictionaryDetailById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).GetDictionaryDetailById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_GetDictionaryDetailById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).GetDictionaryDetailById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_DeleteDictionaryDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).DeleteDictionaryDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_DeleteDictionaryDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).DeleteDictionaryDetail(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_CreateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).CreateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_CreateMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).CreateMenu(ctx, req.(*MenuInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_UpdateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).UpdateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_UpdateMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).UpdateMenu(ctx, req.(*MenuInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_DeleteMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).DeleteMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_DeleteMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).DeleteMenu(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_GetMenuListByRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).GetMenuListByRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_GetMenuListByRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).GetMenuListByRole(ctx, req.(*BaseMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_GetMenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).GetMenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_GetMenuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).GetMenuList(ctx, req.(*PageInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_CreateOauthProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthProviderInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).CreateOauthProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_CreateOauthProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).CreateOauthProvider(ctx, req.(*OauthProviderInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_UpdateOauthProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthProviderInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).UpdateOauthProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_UpdateOauthProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).UpdateOauthProvider(ctx, req.(*OauthProviderInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_GetOauthProviderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthProviderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).GetOauthProviderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_GetOauthProviderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).GetOauthProviderList(ctx, req.(*OauthProviderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_GetOauthProviderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).GetOauthProviderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_GetOauthProviderById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).GetOauthProviderById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_DeleteOauthProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).DeleteOauthProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_DeleteOauthProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).DeleteOauthProvider(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_OauthLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).OauthLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_OauthLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).OauthLogin(ctx, req.(*OauthLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_OauthCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).OauthCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_OauthCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).OauthCallback(ctx, req.(*CallbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_CreatePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).CreatePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_CreatePosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).CreatePosition(ctx, req.(*PositionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_UpdatePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).UpdatePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_UpdatePosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).UpdatePosition(ctx, req.(*PositionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_GetPositionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).GetPositionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_GetPositionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).GetPositionList(ctx, req.(*PositionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_GetPositionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).GetPositionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_GetPositionById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).GetPositionById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_DeletePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).DeletePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_DeletePosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).DeletePosition(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).CreateRole(ctx, req.(*RoleInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).UpdateRole(ctx, req.(*RoleInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_GetRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).GetRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_GetRoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).GetRoleList(ctx, req.(*RoleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_GetRoleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).GetRoleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_GetRoleById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).GetRoleById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).DeleteRole(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_CreateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).CreateToken(ctx, req.(*TokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_UpdateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).UpdateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_UpdateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).UpdateToken(ctx, req.(*TokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_GetTokenList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).GetTokenList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_GetTokenList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).GetTokenList(ctx, req.(*TokenListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_GetTokenById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).GetTokenById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_GetTokenById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).GetTokenById(ctx, req.(*UUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_DeleteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).DeleteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_DeleteToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).DeleteToken(ctx, req.(*UUIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_BlockUserAllToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).BlockUserAllToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_BlockUserAllToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).BlockUserAllToken(ctx, req.(*UUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).CreateUser(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).UpdateUser(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_GetUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).GetUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_GetUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).GetUserList(ctx, req.(*UserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_GetUserById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).GetUserById(ctx, req.(*UUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_GetUserByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).GetUserByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_GetUserByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).GetUserByUsername(ctx, req.(*UsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).DeleteUser(ctx, req.(*UUIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// System_ServiceDesc is the grpc.ServiceDesc for System service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var System_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "system.System",
	HandlerType: (*SystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createApi",
			Handler:    _System_CreateApi_Handler,
		},
		{
			MethodName: "updateApi",
			Handler:    _System_UpdateApi_Handler,
		},
		{
			MethodName: "getApiList",
			Handler:    _System_GetApiList_Handler,
		},
		{
			MethodName: "getApiById",
			Handler:    _System_GetApiById_Handler,
		},
		{
			MethodName: "deleteApi",
			Handler:    _System_DeleteApi_Handler,
		},
		{
			MethodName: "initDatabase",
			Handler:    _System_InitDatabase_Handler,
		},
		{
			MethodName: "createDepartment",
			Handler:    _System_CreateDepartment_Handler,
		},
		{
			MethodName: "updateDepartment",
			Handler:    _System_UpdateDepartment_Handler,
		},
		{
			MethodName: "getDepartmentList",
			Handler:    _System_GetDepartmentList_Handler,
		},
		{
			MethodName: "getDepartmentById",
			Handler:    _System_GetDepartmentById_Handler,
		},
		{
			MethodName: "deleteDepartment",
			Handler:    _System_DeleteDepartment_Handler,
		},
		{
			MethodName: "createDictionary",
			Handler:    _System_CreateDictionary_Handler,
		},
		{
			MethodName: "updateDictionary",
			Handler:    _System_UpdateDictionary_Handler,
		},
		{
			MethodName: "getDictionaryList",
			Handler:    _System_GetDictionaryList_Handler,
		},
		{
			MethodName: "getDictionaryById",
			Handler:    _System_GetDictionaryById_Handler,
		},
		{
			MethodName: "deleteDictionary",
			Handler:    _System_DeleteDictionary_Handler,
		},
		{
			MethodName: "createDictionaryDetail",
			Handler:    _System_CreateDictionaryDetail_Handler,
		},
		{
			MethodName: "updateDictionaryDetail",
			Handler:    _System_UpdateDictionaryDetail_Handler,
		},
		{
			MethodName: "getDictionaryDetailList",
			Handler:    _System_GetDictionaryDetailList_Handler,
		},
		{
			MethodName: "getDictionaryDetailById",
			Handler:    _System_GetDictionaryDetailById_Handler,
		},
		{
			MethodName: "deleteDictionaryDetail",
			Handler:    _System_DeleteDictionaryDetail_Handler,
		},
		{
			MethodName: "createMenu",
			Handler:    _System_CreateMenu_Handler,
		},
		{
			MethodName: "updateMenu",
			Handler:    _System_UpdateMenu_Handler,
		},
		{
			MethodName: "deleteMenu",
			Handler:    _System_DeleteMenu_Handler,
		},
		{
			MethodName: "getMenuListByRole",
			Handler:    _System_GetMenuListByRole_Handler,
		},
		{
			MethodName: "getMenuList",
			Handler:    _System_GetMenuList_Handler,
		},
		{
			MethodName: "createOauthProvider",
			Handler:    _System_CreateOauthProvider_Handler,
		},
		{
			MethodName: "updateOauthProvider",
			Handler:    _System_UpdateOauthProvider_Handler,
		},
		{
			MethodName: "getOauthProviderList",
			Handler:    _System_GetOauthProviderList_Handler,
		},
		{
			MethodName: "getOauthProviderById",
			Handler:    _System_GetOauthProviderById_Handler,
		},
		{
			MethodName: "deleteOauthProvider",
			Handler:    _System_DeleteOauthProvider_Handler,
		},
		{
			MethodName: "oauthLogin",
			Handler:    _System_OauthLogin_Handler,
		},
		{
			MethodName: "oauthCallback",
			Handler:    _System_OauthCallback_Handler,
		},
		{
			MethodName: "createPosition",
			Handler:    _System_CreatePosition_Handler,
		},
		{
			MethodName: "updatePosition",
			Handler:    _System_UpdatePosition_Handler,
		},
		{
			MethodName: "getPositionList",
			Handler:    _System_GetPositionList_Handler,
		},
		{
			MethodName: "getPositionById",
			Handler:    _System_GetPositionById_Handler,
		},
		{
			MethodName: "deletePosition",
			Handler:    _System_DeletePosition_Handler,
		},
		{
			MethodName: "createRole",
			Handler:    _System_CreateRole_Handler,
		},
		{
			MethodName: "updateRole",
			Handler:    _System_UpdateRole_Handler,
		},
		{
			MethodName: "getRoleList",
			Handler:    _System_GetRoleList_Handler,
		},
		{
			MethodName: "getRoleById",
			Handler:    _System_GetRoleById_Handler,
		},
		{
			MethodName: "deleteRole",
			Handler:    _System_DeleteRole_Handler,
		},
		{
			MethodName: "createToken",
			Handler:    _System_CreateToken_Handler,
		},
		{
			MethodName: "updateToken",
			Handler:    _System_UpdateToken_Handler,
		},
		{
			MethodName: "getTokenList",
			Handler:    _System_GetTokenList_Handler,
		},
		{
			MethodName: "getTokenById",
			Handler:    _System_GetTokenById_Handler,
		},
		{
			MethodName: "deleteToken",
			Handler:    _System_DeleteToken_Handler,
		},
		{
			MethodName: "blockUserAllToken",
			Handler:    _System_BlockUserAllToken_Handler,
		},
		{
			MethodName: "createUser",
			Handler:    _System_CreateUser_Handler,
		},
		{
			MethodName: "updateUser",
			Handler:    _System_UpdateUser_Handler,
		},
		{
			MethodName: "getUserList",
			Handler:    _System_GetUserList_Handler,
		},
		{
			MethodName: "getUserById",
			Handler:    _System_GetUserById_Handler,
		},
		{
			MethodName: "getUserByUsername",
			Handler:    _System_GetUserByUsername_Handler,
		},
		{
			MethodName: "deleteUser",
			Handler:    _System_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "system.proto",
}
