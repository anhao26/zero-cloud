// Code generated by ent, DO NOT EDIT.

package entity

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/anhao26/zero-cloud/service/ticket/ticket-rpc/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Entity {
	return predicate.Entity(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Entity {
	return predicate.Entity(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Entity {
	return predicate.Entity(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Entity {
	return predicate.Entity(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Entity {
	return predicate.Entity(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Entity {
	return predicate.Entity(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Entity {
	return predicate.Entity(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldUpdatedAt, v))
}

// EntityCode applies equality check predicate on the "entity_code" field. It's identical to EntityCodeEQ.
func EntityCode(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldEntityCode, v))
}

// EntityClass applies equality check predicate on the "entity_class" field. It's identical to EntityClassEQ.
func EntityClass(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldEntityClass, v))
}

// EntityTable applies equality check predicate on the "entity_table" field. It's identical to EntityTableEQ.
func EntityTable(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldEntityTable, v))
}

// DefaultAttributeSetID applies equality check predicate on the "default_attribute_set_id" field. It's identical to DefaultAttributeSetIDEQ.
func DefaultAttributeSetID(v uint64) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldDefaultAttributeSetID, v))
}

// AdditionalAttributeTable applies equality check predicate on the "additional_attribute_table" field. It's identical to AdditionalAttributeTableEQ.
func AdditionalAttributeTable(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldAdditionalAttributeTable, v))
}

// IsFlatEnabled applies equality check predicate on the "is_flat_enabled" field. It's identical to IsFlatEnabledEQ.
func IsFlatEnabled(v uint32) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldIsFlatEnabled, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldLTE(FieldUpdatedAt, v))
}

// EntityCodeEQ applies the EQ predicate on the "entity_code" field.
func EntityCodeEQ(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldEntityCode, v))
}

// EntityCodeNEQ applies the NEQ predicate on the "entity_code" field.
func EntityCodeNEQ(v string) predicate.Entity {
	return predicate.Entity(sql.FieldNEQ(FieldEntityCode, v))
}

// EntityCodeIn applies the In predicate on the "entity_code" field.
func EntityCodeIn(vs ...string) predicate.Entity {
	return predicate.Entity(sql.FieldIn(FieldEntityCode, vs...))
}

// EntityCodeNotIn applies the NotIn predicate on the "entity_code" field.
func EntityCodeNotIn(vs ...string) predicate.Entity {
	return predicate.Entity(sql.FieldNotIn(FieldEntityCode, vs...))
}

// EntityCodeGT applies the GT predicate on the "entity_code" field.
func EntityCodeGT(v string) predicate.Entity {
	return predicate.Entity(sql.FieldGT(FieldEntityCode, v))
}

// EntityCodeGTE applies the GTE predicate on the "entity_code" field.
func EntityCodeGTE(v string) predicate.Entity {
	return predicate.Entity(sql.FieldGTE(FieldEntityCode, v))
}

// EntityCodeLT applies the LT predicate on the "entity_code" field.
func EntityCodeLT(v string) predicate.Entity {
	return predicate.Entity(sql.FieldLT(FieldEntityCode, v))
}

// EntityCodeLTE applies the LTE predicate on the "entity_code" field.
func EntityCodeLTE(v string) predicate.Entity {
	return predicate.Entity(sql.FieldLTE(FieldEntityCode, v))
}

// EntityCodeContains applies the Contains predicate on the "entity_code" field.
func EntityCodeContains(v string) predicate.Entity {
	return predicate.Entity(sql.FieldContains(FieldEntityCode, v))
}

// EntityCodeHasPrefix applies the HasPrefix predicate on the "entity_code" field.
func EntityCodeHasPrefix(v string) predicate.Entity {
	return predicate.Entity(sql.FieldHasPrefix(FieldEntityCode, v))
}

// EntityCodeHasSuffix applies the HasSuffix predicate on the "entity_code" field.
func EntityCodeHasSuffix(v string) predicate.Entity {
	return predicate.Entity(sql.FieldHasSuffix(FieldEntityCode, v))
}

// EntityCodeEqualFold applies the EqualFold predicate on the "entity_code" field.
func EntityCodeEqualFold(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEqualFold(FieldEntityCode, v))
}

// EntityCodeContainsFold applies the ContainsFold predicate on the "entity_code" field.
func EntityCodeContainsFold(v string) predicate.Entity {
	return predicate.Entity(sql.FieldContainsFold(FieldEntityCode, v))
}

// EntityClassEQ applies the EQ predicate on the "entity_class" field.
func EntityClassEQ(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldEntityClass, v))
}

// EntityClassNEQ applies the NEQ predicate on the "entity_class" field.
func EntityClassNEQ(v string) predicate.Entity {
	return predicate.Entity(sql.FieldNEQ(FieldEntityClass, v))
}

// EntityClassIn applies the In predicate on the "entity_class" field.
func EntityClassIn(vs ...string) predicate.Entity {
	return predicate.Entity(sql.FieldIn(FieldEntityClass, vs...))
}

// EntityClassNotIn applies the NotIn predicate on the "entity_class" field.
func EntityClassNotIn(vs ...string) predicate.Entity {
	return predicate.Entity(sql.FieldNotIn(FieldEntityClass, vs...))
}

// EntityClassGT applies the GT predicate on the "entity_class" field.
func EntityClassGT(v string) predicate.Entity {
	return predicate.Entity(sql.FieldGT(FieldEntityClass, v))
}

// EntityClassGTE applies the GTE predicate on the "entity_class" field.
func EntityClassGTE(v string) predicate.Entity {
	return predicate.Entity(sql.FieldGTE(FieldEntityClass, v))
}

// EntityClassLT applies the LT predicate on the "entity_class" field.
func EntityClassLT(v string) predicate.Entity {
	return predicate.Entity(sql.FieldLT(FieldEntityClass, v))
}

// EntityClassLTE applies the LTE predicate on the "entity_class" field.
func EntityClassLTE(v string) predicate.Entity {
	return predicate.Entity(sql.FieldLTE(FieldEntityClass, v))
}

// EntityClassContains applies the Contains predicate on the "entity_class" field.
func EntityClassContains(v string) predicate.Entity {
	return predicate.Entity(sql.FieldContains(FieldEntityClass, v))
}

// EntityClassHasPrefix applies the HasPrefix predicate on the "entity_class" field.
func EntityClassHasPrefix(v string) predicate.Entity {
	return predicate.Entity(sql.FieldHasPrefix(FieldEntityClass, v))
}

// EntityClassHasSuffix applies the HasSuffix predicate on the "entity_class" field.
func EntityClassHasSuffix(v string) predicate.Entity {
	return predicate.Entity(sql.FieldHasSuffix(FieldEntityClass, v))
}

// EntityClassEqualFold applies the EqualFold predicate on the "entity_class" field.
func EntityClassEqualFold(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEqualFold(FieldEntityClass, v))
}

// EntityClassContainsFold applies the ContainsFold predicate on the "entity_class" field.
func EntityClassContainsFold(v string) predicate.Entity {
	return predicate.Entity(sql.FieldContainsFold(FieldEntityClass, v))
}

// EntityTableEQ applies the EQ predicate on the "entity_table" field.
func EntityTableEQ(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldEntityTable, v))
}

// EntityTableNEQ applies the NEQ predicate on the "entity_table" field.
func EntityTableNEQ(v string) predicate.Entity {
	return predicate.Entity(sql.FieldNEQ(FieldEntityTable, v))
}

// EntityTableIn applies the In predicate on the "entity_table" field.
func EntityTableIn(vs ...string) predicate.Entity {
	return predicate.Entity(sql.FieldIn(FieldEntityTable, vs...))
}

// EntityTableNotIn applies the NotIn predicate on the "entity_table" field.
func EntityTableNotIn(vs ...string) predicate.Entity {
	return predicate.Entity(sql.FieldNotIn(FieldEntityTable, vs...))
}

// EntityTableGT applies the GT predicate on the "entity_table" field.
func EntityTableGT(v string) predicate.Entity {
	return predicate.Entity(sql.FieldGT(FieldEntityTable, v))
}

// EntityTableGTE applies the GTE predicate on the "entity_table" field.
func EntityTableGTE(v string) predicate.Entity {
	return predicate.Entity(sql.FieldGTE(FieldEntityTable, v))
}

// EntityTableLT applies the LT predicate on the "entity_table" field.
func EntityTableLT(v string) predicate.Entity {
	return predicate.Entity(sql.FieldLT(FieldEntityTable, v))
}

// EntityTableLTE applies the LTE predicate on the "entity_table" field.
func EntityTableLTE(v string) predicate.Entity {
	return predicate.Entity(sql.FieldLTE(FieldEntityTable, v))
}

// EntityTableContains applies the Contains predicate on the "entity_table" field.
func EntityTableContains(v string) predicate.Entity {
	return predicate.Entity(sql.FieldContains(FieldEntityTable, v))
}

// EntityTableHasPrefix applies the HasPrefix predicate on the "entity_table" field.
func EntityTableHasPrefix(v string) predicate.Entity {
	return predicate.Entity(sql.FieldHasPrefix(FieldEntityTable, v))
}

// EntityTableHasSuffix applies the HasSuffix predicate on the "entity_table" field.
func EntityTableHasSuffix(v string) predicate.Entity {
	return predicate.Entity(sql.FieldHasSuffix(FieldEntityTable, v))
}

// EntityTableEqualFold applies the EqualFold predicate on the "entity_table" field.
func EntityTableEqualFold(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEqualFold(FieldEntityTable, v))
}

// EntityTableContainsFold applies the ContainsFold predicate on the "entity_table" field.
func EntityTableContainsFold(v string) predicate.Entity {
	return predicate.Entity(sql.FieldContainsFold(FieldEntityTable, v))
}

// DefaultAttributeSetIDEQ applies the EQ predicate on the "default_attribute_set_id" field.
func DefaultAttributeSetIDEQ(v uint64) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldDefaultAttributeSetID, v))
}

// DefaultAttributeSetIDNEQ applies the NEQ predicate on the "default_attribute_set_id" field.
func DefaultAttributeSetIDNEQ(v uint64) predicate.Entity {
	return predicate.Entity(sql.FieldNEQ(FieldDefaultAttributeSetID, v))
}

// DefaultAttributeSetIDIn applies the In predicate on the "default_attribute_set_id" field.
func DefaultAttributeSetIDIn(vs ...uint64) predicate.Entity {
	return predicate.Entity(sql.FieldIn(FieldDefaultAttributeSetID, vs...))
}

// DefaultAttributeSetIDNotIn applies the NotIn predicate on the "default_attribute_set_id" field.
func DefaultAttributeSetIDNotIn(vs ...uint64) predicate.Entity {
	return predicate.Entity(sql.FieldNotIn(FieldDefaultAttributeSetID, vs...))
}

// DefaultAttributeSetIDGT applies the GT predicate on the "default_attribute_set_id" field.
func DefaultAttributeSetIDGT(v uint64) predicate.Entity {
	return predicate.Entity(sql.FieldGT(FieldDefaultAttributeSetID, v))
}

// DefaultAttributeSetIDGTE applies the GTE predicate on the "default_attribute_set_id" field.
func DefaultAttributeSetIDGTE(v uint64) predicate.Entity {
	return predicate.Entity(sql.FieldGTE(FieldDefaultAttributeSetID, v))
}

// DefaultAttributeSetIDLT applies the LT predicate on the "default_attribute_set_id" field.
func DefaultAttributeSetIDLT(v uint64) predicate.Entity {
	return predicate.Entity(sql.FieldLT(FieldDefaultAttributeSetID, v))
}

// DefaultAttributeSetIDLTE applies the LTE predicate on the "default_attribute_set_id" field.
func DefaultAttributeSetIDLTE(v uint64) predicate.Entity {
	return predicate.Entity(sql.FieldLTE(FieldDefaultAttributeSetID, v))
}

// AdditionalAttributeTableEQ applies the EQ predicate on the "additional_attribute_table" field.
func AdditionalAttributeTableEQ(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldAdditionalAttributeTable, v))
}

// AdditionalAttributeTableNEQ applies the NEQ predicate on the "additional_attribute_table" field.
func AdditionalAttributeTableNEQ(v string) predicate.Entity {
	return predicate.Entity(sql.FieldNEQ(FieldAdditionalAttributeTable, v))
}

// AdditionalAttributeTableIn applies the In predicate on the "additional_attribute_table" field.
func AdditionalAttributeTableIn(vs ...string) predicate.Entity {
	return predicate.Entity(sql.FieldIn(FieldAdditionalAttributeTable, vs...))
}

// AdditionalAttributeTableNotIn applies the NotIn predicate on the "additional_attribute_table" field.
func AdditionalAttributeTableNotIn(vs ...string) predicate.Entity {
	return predicate.Entity(sql.FieldNotIn(FieldAdditionalAttributeTable, vs...))
}

// AdditionalAttributeTableGT applies the GT predicate on the "additional_attribute_table" field.
func AdditionalAttributeTableGT(v string) predicate.Entity {
	return predicate.Entity(sql.FieldGT(FieldAdditionalAttributeTable, v))
}

// AdditionalAttributeTableGTE applies the GTE predicate on the "additional_attribute_table" field.
func AdditionalAttributeTableGTE(v string) predicate.Entity {
	return predicate.Entity(sql.FieldGTE(FieldAdditionalAttributeTable, v))
}

// AdditionalAttributeTableLT applies the LT predicate on the "additional_attribute_table" field.
func AdditionalAttributeTableLT(v string) predicate.Entity {
	return predicate.Entity(sql.FieldLT(FieldAdditionalAttributeTable, v))
}

// AdditionalAttributeTableLTE applies the LTE predicate on the "additional_attribute_table" field.
func AdditionalAttributeTableLTE(v string) predicate.Entity {
	return predicate.Entity(sql.FieldLTE(FieldAdditionalAttributeTable, v))
}

// AdditionalAttributeTableContains applies the Contains predicate on the "additional_attribute_table" field.
func AdditionalAttributeTableContains(v string) predicate.Entity {
	return predicate.Entity(sql.FieldContains(FieldAdditionalAttributeTable, v))
}

// AdditionalAttributeTableHasPrefix applies the HasPrefix predicate on the "additional_attribute_table" field.
func AdditionalAttributeTableHasPrefix(v string) predicate.Entity {
	return predicate.Entity(sql.FieldHasPrefix(FieldAdditionalAttributeTable, v))
}

// AdditionalAttributeTableHasSuffix applies the HasSuffix predicate on the "additional_attribute_table" field.
func AdditionalAttributeTableHasSuffix(v string) predicate.Entity {
	return predicate.Entity(sql.FieldHasSuffix(FieldAdditionalAttributeTable, v))
}

// AdditionalAttributeTableEqualFold applies the EqualFold predicate on the "additional_attribute_table" field.
func AdditionalAttributeTableEqualFold(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEqualFold(FieldAdditionalAttributeTable, v))
}

// AdditionalAttributeTableContainsFold applies the ContainsFold predicate on the "additional_attribute_table" field.
func AdditionalAttributeTableContainsFold(v string) predicate.Entity {
	return predicate.Entity(sql.FieldContainsFold(FieldAdditionalAttributeTable, v))
}

// IsFlatEnabledEQ applies the EQ predicate on the "is_flat_enabled" field.
func IsFlatEnabledEQ(v uint32) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldIsFlatEnabled, v))
}

// IsFlatEnabledNEQ applies the NEQ predicate on the "is_flat_enabled" field.
func IsFlatEnabledNEQ(v uint32) predicate.Entity {
	return predicate.Entity(sql.FieldNEQ(FieldIsFlatEnabled, v))
}

// IsFlatEnabledIn applies the In predicate on the "is_flat_enabled" field.
func IsFlatEnabledIn(vs ...uint32) predicate.Entity {
	return predicate.Entity(sql.FieldIn(FieldIsFlatEnabled, vs...))
}

// IsFlatEnabledNotIn applies the NotIn predicate on the "is_flat_enabled" field.
func IsFlatEnabledNotIn(vs ...uint32) predicate.Entity {
	return predicate.Entity(sql.FieldNotIn(FieldIsFlatEnabled, vs...))
}

// IsFlatEnabledGT applies the GT predicate on the "is_flat_enabled" field.
func IsFlatEnabledGT(v uint32) predicate.Entity {
	return predicate.Entity(sql.FieldGT(FieldIsFlatEnabled, v))
}

// IsFlatEnabledGTE applies the GTE predicate on the "is_flat_enabled" field.
func IsFlatEnabledGTE(v uint32) predicate.Entity {
	return predicate.Entity(sql.FieldGTE(FieldIsFlatEnabled, v))
}

// IsFlatEnabledLT applies the LT predicate on the "is_flat_enabled" field.
func IsFlatEnabledLT(v uint32) predicate.Entity {
	return predicate.Entity(sql.FieldLT(FieldIsFlatEnabled, v))
}

// IsFlatEnabledLTE applies the LTE predicate on the "is_flat_enabled" field.
func IsFlatEnabledLTE(v uint32) predicate.Entity {
	return predicate.Entity(sql.FieldLTE(FieldIsFlatEnabled, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Entity) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Entity) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Entity) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		p(s.Not())
	})
}
