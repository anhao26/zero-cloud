// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/anhao26/zero-cloud/service/ticket/ticket-rpc/ent/attributegroup"
)

// AttributeGroupCreate is the builder for creating a AttributeGroup entity.
type AttributeGroupCreate struct {
	config
	mutation *AttributeGroupMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (agc *AttributeGroupCreate) SetCreatedAt(t time.Time) *AttributeGroupCreate {
	agc.mutation.SetCreatedAt(t)
	return agc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (agc *AttributeGroupCreate) SetNillableCreatedAt(t *time.Time) *AttributeGroupCreate {
	if t != nil {
		agc.SetCreatedAt(*t)
	}
	return agc
}

// SetUpdatedAt sets the "updated_at" field.
func (agc *AttributeGroupCreate) SetUpdatedAt(t time.Time) *AttributeGroupCreate {
	agc.mutation.SetUpdatedAt(t)
	return agc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (agc *AttributeGroupCreate) SetNillableUpdatedAt(t *time.Time) *AttributeGroupCreate {
	if t != nil {
		agc.SetUpdatedAt(*t)
	}
	return agc
}

// SetAttributeSetID sets the "attribute_set_id" field.
func (agc *AttributeGroupCreate) SetAttributeSetID(u uint64) *AttributeGroupCreate {
	agc.mutation.SetAttributeSetID(u)
	return agc
}

// SetAttributeGroupName sets the "attribute_group_name" field.
func (agc *AttributeGroupCreate) SetAttributeGroupName(s string) *AttributeGroupCreate {
	agc.mutation.SetAttributeGroupName(s)
	return agc
}

// SetSequence sets the "sequence" field.
func (agc *AttributeGroupCreate) SetSequence(u uint8) *AttributeGroupCreate {
	agc.mutation.SetSequence(u)
	return agc
}

// SetID sets the "id" field.
func (agc *AttributeGroupCreate) SetID(u uint64) *AttributeGroupCreate {
	agc.mutation.SetID(u)
	return agc
}

// Mutation returns the AttributeGroupMutation object of the builder.
func (agc *AttributeGroupCreate) Mutation() *AttributeGroupMutation {
	return agc.mutation
}

// Save creates the AttributeGroup in the database.
func (agc *AttributeGroupCreate) Save(ctx context.Context) (*AttributeGroup, error) {
	agc.defaults()
	return withHooks(ctx, agc.sqlSave, agc.mutation, agc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (agc *AttributeGroupCreate) SaveX(ctx context.Context) *AttributeGroup {
	v, err := agc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (agc *AttributeGroupCreate) Exec(ctx context.Context) error {
	_, err := agc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agc *AttributeGroupCreate) ExecX(ctx context.Context) {
	if err := agc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (agc *AttributeGroupCreate) defaults() {
	if _, ok := agc.mutation.CreatedAt(); !ok {
		v := attributegroup.DefaultCreatedAt()
		agc.mutation.SetCreatedAt(v)
	}
	if _, ok := agc.mutation.UpdatedAt(); !ok {
		v := attributegroup.DefaultUpdatedAt()
		agc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (agc *AttributeGroupCreate) check() error {
	if _, ok := agc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AttributeGroup.created_at"`)}
	}
	if _, ok := agc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AttributeGroup.updated_at"`)}
	}
	if _, ok := agc.mutation.AttributeSetID(); !ok {
		return &ValidationError{Name: "attribute_set_id", err: errors.New(`ent: missing required field "AttributeGroup.attribute_set_id"`)}
	}
	if _, ok := agc.mutation.AttributeGroupName(); !ok {
		return &ValidationError{Name: "attribute_group_name", err: errors.New(`ent: missing required field "AttributeGroup.attribute_group_name"`)}
	}
	if _, ok := agc.mutation.Sequence(); !ok {
		return &ValidationError{Name: "sequence", err: errors.New(`ent: missing required field "AttributeGroup.sequence"`)}
	}
	return nil
}

func (agc *AttributeGroupCreate) sqlSave(ctx context.Context) (*AttributeGroup, error) {
	if err := agc.check(); err != nil {
		return nil, err
	}
	_node, _spec := agc.createSpec()
	if err := sqlgraph.CreateNode(ctx, agc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	agc.mutation.id = &_node.ID
	agc.mutation.done = true
	return _node, nil
}

func (agc *AttributeGroupCreate) createSpec() (*AttributeGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &AttributeGroup{config: agc.config}
		_spec = sqlgraph.NewCreateSpec(attributegroup.Table, sqlgraph.NewFieldSpec(attributegroup.FieldID, field.TypeUint64))
	)
	if id, ok := agc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := agc.mutation.CreatedAt(); ok {
		_spec.SetField(attributegroup.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := agc.mutation.UpdatedAt(); ok {
		_spec.SetField(attributegroup.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := agc.mutation.AttributeSetID(); ok {
		_spec.SetField(attributegroup.FieldAttributeSetID, field.TypeUint64, value)
		_node.AttributeSetID = value
	}
	if value, ok := agc.mutation.AttributeGroupName(); ok {
		_spec.SetField(attributegroup.FieldAttributeGroupName, field.TypeString, value)
		_node.AttributeGroupName = value
	}
	if value, ok := agc.mutation.Sequence(); ok {
		_spec.SetField(attributegroup.FieldSequence, field.TypeUint8, value)
		_node.Sequence = value
	}
	return _node, _spec
}

// AttributeGroupCreateBulk is the builder for creating many AttributeGroup entities in bulk.
type AttributeGroupCreateBulk struct {
	config
	builders []*AttributeGroupCreate
}

// Save creates the AttributeGroup entities in the database.
func (agcb *AttributeGroupCreateBulk) Save(ctx context.Context) ([]*AttributeGroup, error) {
	specs := make([]*sqlgraph.CreateSpec, len(agcb.builders))
	nodes := make([]*AttributeGroup, len(agcb.builders))
	mutators := make([]Mutator, len(agcb.builders))
	for i := range agcb.builders {
		func(i int, root context.Context) {
			builder := agcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AttributeGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, agcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, agcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, agcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (agcb *AttributeGroupCreateBulk) SaveX(ctx context.Context) []*AttributeGroup {
	v, err := agcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (agcb *AttributeGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := agcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agcb *AttributeGroupCreateBulk) ExecX(ctx context.Context) {
	if err := agcb.Exec(ctx); err != nil {
		panic(err)
	}
}
