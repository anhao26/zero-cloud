// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/anhao26/zero-cloud/service/ticket/ticket-rpc/ent/attributeoption"
	"github.com/anhao26/zero-cloud/service/ticket/ticket-rpc/ent/predicate"
)

// AttributeOptionUpdate is the builder for updating AttributeOption entities.
type AttributeOptionUpdate struct {
	config
	hooks    []Hook
	mutation *AttributeOptionMutation
}

// Where appends a list predicates to the AttributeOptionUpdate builder.
func (aou *AttributeOptionUpdate) Where(ps ...predicate.AttributeOption) *AttributeOptionUpdate {
	aou.mutation.Where(ps...)
	return aou
}

// SetUpdatedAt sets the "updated_at" field.
func (aou *AttributeOptionUpdate) SetUpdatedAt(t time.Time) *AttributeOptionUpdate {
	aou.mutation.SetUpdatedAt(t)
	return aou
}

// SetAttributeID sets the "attribute_id" field.
func (aou *AttributeOptionUpdate) SetAttributeID(u uint64) *AttributeOptionUpdate {
	aou.mutation.ResetAttributeID()
	aou.mutation.SetAttributeID(u)
	return aou
}

// AddAttributeID adds u to the "attribute_id" field.
func (aou *AttributeOptionUpdate) AddAttributeID(u int64) *AttributeOptionUpdate {
	aou.mutation.AddAttributeID(u)
	return aou
}

// SetLabel sets the "label" field.
func (aou *AttributeOptionUpdate) SetLabel(s string) *AttributeOptionUpdate {
	aou.mutation.SetLabel(s)
	return aou
}

// SetValue sets the "value" field.
func (aou *AttributeOptionUpdate) SetValue(u uint64) *AttributeOptionUpdate {
	aou.mutation.ResetValue()
	aou.mutation.SetValue(u)
	return aou
}

// AddValue adds u to the "value" field.
func (aou *AttributeOptionUpdate) AddValue(u int64) *AttributeOptionUpdate {
	aou.mutation.AddValue(u)
	return aou
}

// Mutation returns the AttributeOptionMutation object of the builder.
func (aou *AttributeOptionUpdate) Mutation() *AttributeOptionMutation {
	return aou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aou *AttributeOptionUpdate) Save(ctx context.Context) (int, error) {
	aou.defaults()
	return withHooks(ctx, aou.sqlSave, aou.mutation, aou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aou *AttributeOptionUpdate) SaveX(ctx context.Context) int {
	affected, err := aou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aou *AttributeOptionUpdate) Exec(ctx context.Context) error {
	_, err := aou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aou *AttributeOptionUpdate) ExecX(ctx context.Context) {
	if err := aou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aou *AttributeOptionUpdate) defaults() {
	if _, ok := aou.mutation.UpdatedAt(); !ok {
		v := attributeoption.UpdateDefaultUpdatedAt()
		aou.mutation.SetUpdatedAt(v)
	}
}

func (aou *AttributeOptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(attributeoption.Table, attributeoption.Columns, sqlgraph.NewFieldSpec(attributeoption.FieldID, field.TypeUint64))
	if ps := aou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aou.mutation.UpdatedAt(); ok {
		_spec.SetField(attributeoption.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aou.mutation.AttributeID(); ok {
		_spec.SetField(attributeoption.FieldAttributeID, field.TypeUint64, value)
	}
	if value, ok := aou.mutation.AddedAttributeID(); ok {
		_spec.AddField(attributeoption.FieldAttributeID, field.TypeUint64, value)
	}
	if value, ok := aou.mutation.Label(); ok {
		_spec.SetField(attributeoption.FieldLabel, field.TypeString, value)
	}
	if value, ok := aou.mutation.Value(); ok {
		_spec.SetField(attributeoption.FieldValue, field.TypeUint64, value)
	}
	if value, ok := aou.mutation.AddedValue(); ok {
		_spec.AddField(attributeoption.FieldValue, field.TypeUint64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attributeoption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aou.mutation.done = true
	return n, nil
}

// AttributeOptionUpdateOne is the builder for updating a single AttributeOption entity.
type AttributeOptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AttributeOptionMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (aouo *AttributeOptionUpdateOne) SetUpdatedAt(t time.Time) *AttributeOptionUpdateOne {
	aouo.mutation.SetUpdatedAt(t)
	return aouo
}

// SetAttributeID sets the "attribute_id" field.
func (aouo *AttributeOptionUpdateOne) SetAttributeID(u uint64) *AttributeOptionUpdateOne {
	aouo.mutation.ResetAttributeID()
	aouo.mutation.SetAttributeID(u)
	return aouo
}

// AddAttributeID adds u to the "attribute_id" field.
func (aouo *AttributeOptionUpdateOne) AddAttributeID(u int64) *AttributeOptionUpdateOne {
	aouo.mutation.AddAttributeID(u)
	return aouo
}

// SetLabel sets the "label" field.
func (aouo *AttributeOptionUpdateOne) SetLabel(s string) *AttributeOptionUpdateOne {
	aouo.mutation.SetLabel(s)
	return aouo
}

// SetValue sets the "value" field.
func (aouo *AttributeOptionUpdateOne) SetValue(u uint64) *AttributeOptionUpdateOne {
	aouo.mutation.ResetValue()
	aouo.mutation.SetValue(u)
	return aouo
}

// AddValue adds u to the "value" field.
func (aouo *AttributeOptionUpdateOne) AddValue(u int64) *AttributeOptionUpdateOne {
	aouo.mutation.AddValue(u)
	return aouo
}

// Mutation returns the AttributeOptionMutation object of the builder.
func (aouo *AttributeOptionUpdateOne) Mutation() *AttributeOptionMutation {
	return aouo.mutation
}

// Where appends a list predicates to the AttributeOptionUpdate builder.
func (aouo *AttributeOptionUpdateOne) Where(ps ...predicate.AttributeOption) *AttributeOptionUpdateOne {
	aouo.mutation.Where(ps...)
	return aouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aouo *AttributeOptionUpdateOne) Select(field string, fields ...string) *AttributeOptionUpdateOne {
	aouo.fields = append([]string{field}, fields...)
	return aouo
}

// Save executes the query and returns the updated AttributeOption entity.
func (aouo *AttributeOptionUpdateOne) Save(ctx context.Context) (*AttributeOption, error) {
	aouo.defaults()
	return withHooks(ctx, aouo.sqlSave, aouo.mutation, aouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aouo *AttributeOptionUpdateOne) SaveX(ctx context.Context) *AttributeOption {
	node, err := aouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aouo *AttributeOptionUpdateOne) Exec(ctx context.Context) error {
	_, err := aouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aouo *AttributeOptionUpdateOne) ExecX(ctx context.Context) {
	if err := aouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aouo *AttributeOptionUpdateOne) defaults() {
	if _, ok := aouo.mutation.UpdatedAt(); !ok {
		v := attributeoption.UpdateDefaultUpdatedAt()
		aouo.mutation.SetUpdatedAt(v)
	}
}

func (aouo *AttributeOptionUpdateOne) sqlSave(ctx context.Context) (_node *AttributeOption, err error) {
	_spec := sqlgraph.NewUpdateSpec(attributeoption.Table, attributeoption.Columns, sqlgraph.NewFieldSpec(attributeoption.FieldID, field.TypeUint64))
	id, ok := aouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AttributeOption.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attributeoption.FieldID)
		for _, f := range fields {
			if !attributeoption.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != attributeoption.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aouo.mutation.UpdatedAt(); ok {
		_spec.SetField(attributeoption.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aouo.mutation.AttributeID(); ok {
		_spec.SetField(attributeoption.FieldAttributeID, field.TypeUint64, value)
	}
	if value, ok := aouo.mutation.AddedAttributeID(); ok {
		_spec.AddField(attributeoption.FieldAttributeID, field.TypeUint64, value)
	}
	if value, ok := aouo.mutation.Label(); ok {
		_spec.SetField(attributeoption.FieldLabel, field.TypeString, value)
	}
	if value, ok := aouo.mutation.Value(); ok {
		_spec.SetField(attributeoption.FieldValue, field.TypeUint64, value)
	}
	if value, ok := aouo.mutation.AddedValue(); ok {
		_spec.AddField(attributeoption.FieldValue, field.TypeUint64, value)
	}
	_node = &AttributeOption{config: aouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attributeoption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aouo.mutation.done = true
	return _node, nil
}
