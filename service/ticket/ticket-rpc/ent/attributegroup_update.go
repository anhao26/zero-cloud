// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/anhao26/zero-cloud/service/ticket/ticket-rpc/ent/attributegroup"
	"github.com/anhao26/zero-cloud/service/ticket/ticket-rpc/ent/predicate"
)

// AttributeGroupUpdate is the builder for updating AttributeGroup entities.
type AttributeGroupUpdate struct {
	config
	hooks    []Hook
	mutation *AttributeGroupMutation
}

// Where appends a list predicates to the AttributeGroupUpdate builder.
func (agu *AttributeGroupUpdate) Where(ps ...predicate.AttributeGroup) *AttributeGroupUpdate {
	agu.mutation.Where(ps...)
	return agu
}

// SetUpdatedAt sets the "updated_at" field.
func (agu *AttributeGroupUpdate) SetUpdatedAt(t time.Time) *AttributeGroupUpdate {
	agu.mutation.SetUpdatedAt(t)
	return agu
}

// SetAttributeSetID sets the "attribute_set_id" field.
func (agu *AttributeGroupUpdate) SetAttributeSetID(u uint64) *AttributeGroupUpdate {
	agu.mutation.ResetAttributeSetID()
	agu.mutation.SetAttributeSetID(u)
	return agu
}

// AddAttributeSetID adds u to the "attribute_set_id" field.
func (agu *AttributeGroupUpdate) AddAttributeSetID(u int64) *AttributeGroupUpdate {
	agu.mutation.AddAttributeSetID(u)
	return agu
}

// SetAttributeGroupName sets the "attribute_group_name" field.
func (agu *AttributeGroupUpdate) SetAttributeGroupName(s string) *AttributeGroupUpdate {
	agu.mutation.SetAttributeGroupName(s)
	return agu
}

// SetSequence sets the "sequence" field.
func (agu *AttributeGroupUpdate) SetSequence(u uint8) *AttributeGroupUpdate {
	agu.mutation.ResetSequence()
	agu.mutation.SetSequence(u)
	return agu
}

// AddSequence adds u to the "sequence" field.
func (agu *AttributeGroupUpdate) AddSequence(u int8) *AttributeGroupUpdate {
	agu.mutation.AddSequence(u)
	return agu
}

// Mutation returns the AttributeGroupMutation object of the builder.
func (agu *AttributeGroupUpdate) Mutation() *AttributeGroupMutation {
	return agu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (agu *AttributeGroupUpdate) Save(ctx context.Context) (int, error) {
	agu.defaults()
	return withHooks(ctx, agu.sqlSave, agu.mutation, agu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (agu *AttributeGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := agu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (agu *AttributeGroupUpdate) Exec(ctx context.Context) error {
	_, err := agu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agu *AttributeGroupUpdate) ExecX(ctx context.Context) {
	if err := agu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (agu *AttributeGroupUpdate) defaults() {
	if _, ok := agu.mutation.UpdatedAt(); !ok {
		v := attributegroup.UpdateDefaultUpdatedAt()
		agu.mutation.SetUpdatedAt(v)
	}
}

func (agu *AttributeGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(attributegroup.Table, attributegroup.Columns, sqlgraph.NewFieldSpec(attributegroup.FieldID, field.TypeUint64))
	if ps := agu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := agu.mutation.UpdatedAt(); ok {
		_spec.SetField(attributegroup.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := agu.mutation.AttributeSetID(); ok {
		_spec.SetField(attributegroup.FieldAttributeSetID, field.TypeUint64, value)
	}
	if value, ok := agu.mutation.AddedAttributeSetID(); ok {
		_spec.AddField(attributegroup.FieldAttributeSetID, field.TypeUint64, value)
	}
	if value, ok := agu.mutation.AttributeGroupName(); ok {
		_spec.SetField(attributegroup.FieldAttributeGroupName, field.TypeString, value)
	}
	if value, ok := agu.mutation.Sequence(); ok {
		_spec.SetField(attributegroup.FieldSequence, field.TypeUint8, value)
	}
	if value, ok := agu.mutation.AddedSequence(); ok {
		_spec.AddField(attributegroup.FieldSequence, field.TypeUint8, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, agu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attributegroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	agu.mutation.done = true
	return n, nil
}

// AttributeGroupUpdateOne is the builder for updating a single AttributeGroup entity.
type AttributeGroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AttributeGroupMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (aguo *AttributeGroupUpdateOne) SetUpdatedAt(t time.Time) *AttributeGroupUpdateOne {
	aguo.mutation.SetUpdatedAt(t)
	return aguo
}

// SetAttributeSetID sets the "attribute_set_id" field.
func (aguo *AttributeGroupUpdateOne) SetAttributeSetID(u uint64) *AttributeGroupUpdateOne {
	aguo.mutation.ResetAttributeSetID()
	aguo.mutation.SetAttributeSetID(u)
	return aguo
}

// AddAttributeSetID adds u to the "attribute_set_id" field.
func (aguo *AttributeGroupUpdateOne) AddAttributeSetID(u int64) *AttributeGroupUpdateOne {
	aguo.mutation.AddAttributeSetID(u)
	return aguo
}

// SetAttributeGroupName sets the "attribute_group_name" field.
func (aguo *AttributeGroupUpdateOne) SetAttributeGroupName(s string) *AttributeGroupUpdateOne {
	aguo.mutation.SetAttributeGroupName(s)
	return aguo
}

// SetSequence sets the "sequence" field.
func (aguo *AttributeGroupUpdateOne) SetSequence(u uint8) *AttributeGroupUpdateOne {
	aguo.mutation.ResetSequence()
	aguo.mutation.SetSequence(u)
	return aguo
}

// AddSequence adds u to the "sequence" field.
func (aguo *AttributeGroupUpdateOne) AddSequence(u int8) *AttributeGroupUpdateOne {
	aguo.mutation.AddSequence(u)
	return aguo
}

// Mutation returns the AttributeGroupMutation object of the builder.
func (aguo *AttributeGroupUpdateOne) Mutation() *AttributeGroupMutation {
	return aguo.mutation
}

// Where appends a list predicates to the AttributeGroupUpdate builder.
func (aguo *AttributeGroupUpdateOne) Where(ps ...predicate.AttributeGroup) *AttributeGroupUpdateOne {
	aguo.mutation.Where(ps...)
	return aguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aguo *AttributeGroupUpdateOne) Select(field string, fields ...string) *AttributeGroupUpdateOne {
	aguo.fields = append([]string{field}, fields...)
	return aguo
}

// Save executes the query and returns the updated AttributeGroup entity.
func (aguo *AttributeGroupUpdateOne) Save(ctx context.Context) (*AttributeGroup, error) {
	aguo.defaults()
	return withHooks(ctx, aguo.sqlSave, aguo.mutation, aguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aguo *AttributeGroupUpdateOne) SaveX(ctx context.Context) *AttributeGroup {
	node, err := aguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aguo *AttributeGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := aguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aguo *AttributeGroupUpdateOne) ExecX(ctx context.Context) {
	if err := aguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aguo *AttributeGroupUpdateOne) defaults() {
	if _, ok := aguo.mutation.UpdatedAt(); !ok {
		v := attributegroup.UpdateDefaultUpdatedAt()
		aguo.mutation.SetUpdatedAt(v)
	}
}

func (aguo *AttributeGroupUpdateOne) sqlSave(ctx context.Context) (_node *AttributeGroup, err error) {
	_spec := sqlgraph.NewUpdateSpec(attributegroup.Table, attributegroup.Columns, sqlgraph.NewFieldSpec(attributegroup.FieldID, field.TypeUint64))
	id, ok := aguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AttributeGroup.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attributegroup.FieldID)
		for _, f := range fields {
			if !attributegroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != attributegroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aguo.mutation.UpdatedAt(); ok {
		_spec.SetField(attributegroup.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aguo.mutation.AttributeSetID(); ok {
		_spec.SetField(attributegroup.FieldAttributeSetID, field.TypeUint64, value)
	}
	if value, ok := aguo.mutation.AddedAttributeSetID(); ok {
		_spec.AddField(attributegroup.FieldAttributeSetID, field.TypeUint64, value)
	}
	if value, ok := aguo.mutation.AttributeGroupName(); ok {
		_spec.SetField(attributegroup.FieldAttributeGroupName, field.TypeString, value)
	}
	if value, ok := aguo.mutation.Sequence(); ok {
		_spec.SetField(attributegroup.FieldSequence, field.TypeUint8, value)
	}
	if value, ok := aguo.mutation.AddedSequence(); ok {
		_spec.AddField(attributegroup.FieldSequence, field.TypeUint8, value)
	}
	_node = &AttributeGroup{config: aguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attributegroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aguo.mutation.done = true
	return _node, nil
}
