// Code generated by ent, DO NOT EDIT.

package attribute

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/anhao26/zero-cloud/service/ticket/ticket-rpc/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Attribute {
	return predicate.Attribute(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Attribute {
	return predicate.Attribute(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Attribute {
	return predicate.Attribute(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Attribute {
	return predicate.Attribute(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Attribute {
	return predicate.Attribute(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Attribute {
	return predicate.Attribute(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Attribute {
	return predicate.Attribute(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldUpdatedAt, v))
}

// EntityID applies equality check predicate on the "entity_id" field. It's identical to EntityIDEQ.
func EntityID(v uint64) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldEntityID, v))
}

// AttributeCode applies equality check predicate on the "attribute_code" field. It's identical to AttributeCodeEQ.
func AttributeCode(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldAttributeCode, v))
}

// BackendClass applies equality check predicate on the "backend_class" field. It's identical to BackendClassEQ.
func BackendClass(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldBackendClass, v))
}

// BackendType applies equality check predicate on the "backend_type" field. It's identical to BackendTypeEQ.
func BackendType(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldBackendType, v))
}

// BackendTable applies equality check predicate on the "backend_table" field. It's identical to BackendTableEQ.
func BackendTable(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldBackendTable, v))
}

// FrontendClass applies equality check predicate on the "frontend_class" field. It's identical to FrontendClassEQ.
func FrontendClass(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldFrontendClass, v))
}

// FrontendType applies equality check predicate on the "frontend_type" field. It's identical to FrontendTypeEQ.
func FrontendType(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldFrontendType, v))
}

// FrontendLabel applies equality check predicate on the "frontend_label" field. It's identical to FrontendLabelEQ.
func FrontendLabel(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldFrontendLabel, v))
}

// SourceClass applies equality check predicate on the "source_class" field. It's identical to SourceClassEQ.
func SourceClass(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldSourceClass, v))
}

// DefaultValue applies equality check predicate on the "default_value" field. It's identical to DefaultValueEQ.
func DefaultValue(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldDefaultValue, v))
}

// IsFilterable applies equality check predicate on the "is_filterable" field. It's identical to IsFilterableEQ.
func IsFilterable(v uint8) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldIsFilterable, v))
}

// IsSearchable applies equality check predicate on the "is_searchable" field. It's identical to IsSearchableEQ.
func IsSearchable(v uint8) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldIsSearchable, v))
}

// IsRequired applies equality check predicate on the "is_required" field. It's identical to IsRequiredEQ.
func IsRequired(v uint8) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldIsRequired, v))
}

// RequiredValidateClass applies equality check predicate on the "required_validate_class" field. It's identical to RequiredValidateClassEQ.
func RequiredValidateClass(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldRequiredValidateClass, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Attribute {
	return predicate.Attribute(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Attribute {
	return predicate.Attribute(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Attribute {
	return predicate.Attribute(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Attribute {
	return predicate.Attribute(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Attribute {
	return predicate.Attribute(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Attribute {
	return predicate.Attribute(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Attribute {
	return predicate.Attribute(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Attribute {
	return predicate.Attribute(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Attribute {
	return predicate.Attribute(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Attribute {
	return predicate.Attribute(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Attribute {
	return predicate.Attribute(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Attribute {
	return predicate.Attribute(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Attribute {
	return predicate.Attribute(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Attribute {
	return predicate.Attribute(sql.FieldLTE(FieldUpdatedAt, v))
}

// EntityIDEQ applies the EQ predicate on the "entity_id" field.
func EntityIDEQ(v uint64) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldEntityID, v))
}

// EntityIDNEQ applies the NEQ predicate on the "entity_id" field.
func EntityIDNEQ(v uint64) predicate.Attribute {
	return predicate.Attribute(sql.FieldNEQ(FieldEntityID, v))
}

// EntityIDIn applies the In predicate on the "entity_id" field.
func EntityIDIn(vs ...uint64) predicate.Attribute {
	return predicate.Attribute(sql.FieldIn(FieldEntityID, vs...))
}

// EntityIDNotIn applies the NotIn predicate on the "entity_id" field.
func EntityIDNotIn(vs ...uint64) predicate.Attribute {
	return predicate.Attribute(sql.FieldNotIn(FieldEntityID, vs...))
}

// EntityIDGT applies the GT predicate on the "entity_id" field.
func EntityIDGT(v uint64) predicate.Attribute {
	return predicate.Attribute(sql.FieldGT(FieldEntityID, v))
}

// EntityIDGTE applies the GTE predicate on the "entity_id" field.
func EntityIDGTE(v uint64) predicate.Attribute {
	return predicate.Attribute(sql.FieldGTE(FieldEntityID, v))
}

// EntityIDLT applies the LT predicate on the "entity_id" field.
func EntityIDLT(v uint64) predicate.Attribute {
	return predicate.Attribute(sql.FieldLT(FieldEntityID, v))
}

// EntityIDLTE applies the LTE predicate on the "entity_id" field.
func EntityIDLTE(v uint64) predicate.Attribute {
	return predicate.Attribute(sql.FieldLTE(FieldEntityID, v))
}

// AttributeCodeEQ applies the EQ predicate on the "attribute_code" field.
func AttributeCodeEQ(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldAttributeCode, v))
}

// AttributeCodeNEQ applies the NEQ predicate on the "attribute_code" field.
func AttributeCodeNEQ(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldNEQ(FieldAttributeCode, v))
}

// AttributeCodeIn applies the In predicate on the "attribute_code" field.
func AttributeCodeIn(vs ...string) predicate.Attribute {
	return predicate.Attribute(sql.FieldIn(FieldAttributeCode, vs...))
}

// AttributeCodeNotIn applies the NotIn predicate on the "attribute_code" field.
func AttributeCodeNotIn(vs ...string) predicate.Attribute {
	return predicate.Attribute(sql.FieldNotIn(FieldAttributeCode, vs...))
}

// AttributeCodeGT applies the GT predicate on the "attribute_code" field.
func AttributeCodeGT(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldGT(FieldAttributeCode, v))
}

// AttributeCodeGTE applies the GTE predicate on the "attribute_code" field.
func AttributeCodeGTE(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldGTE(FieldAttributeCode, v))
}

// AttributeCodeLT applies the LT predicate on the "attribute_code" field.
func AttributeCodeLT(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldLT(FieldAttributeCode, v))
}

// AttributeCodeLTE applies the LTE predicate on the "attribute_code" field.
func AttributeCodeLTE(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldLTE(FieldAttributeCode, v))
}

// AttributeCodeContains applies the Contains predicate on the "attribute_code" field.
func AttributeCodeContains(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldContains(FieldAttributeCode, v))
}

// AttributeCodeHasPrefix applies the HasPrefix predicate on the "attribute_code" field.
func AttributeCodeHasPrefix(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldHasPrefix(FieldAttributeCode, v))
}

// AttributeCodeHasSuffix applies the HasSuffix predicate on the "attribute_code" field.
func AttributeCodeHasSuffix(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldHasSuffix(FieldAttributeCode, v))
}

// AttributeCodeEqualFold applies the EqualFold predicate on the "attribute_code" field.
func AttributeCodeEqualFold(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEqualFold(FieldAttributeCode, v))
}

// AttributeCodeContainsFold applies the ContainsFold predicate on the "attribute_code" field.
func AttributeCodeContainsFold(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldContainsFold(FieldAttributeCode, v))
}

// BackendClassEQ applies the EQ predicate on the "backend_class" field.
func BackendClassEQ(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldBackendClass, v))
}

// BackendClassNEQ applies the NEQ predicate on the "backend_class" field.
func BackendClassNEQ(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldNEQ(FieldBackendClass, v))
}

// BackendClassIn applies the In predicate on the "backend_class" field.
func BackendClassIn(vs ...string) predicate.Attribute {
	return predicate.Attribute(sql.FieldIn(FieldBackendClass, vs...))
}

// BackendClassNotIn applies the NotIn predicate on the "backend_class" field.
func BackendClassNotIn(vs ...string) predicate.Attribute {
	return predicate.Attribute(sql.FieldNotIn(FieldBackendClass, vs...))
}

// BackendClassGT applies the GT predicate on the "backend_class" field.
func BackendClassGT(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldGT(FieldBackendClass, v))
}

// BackendClassGTE applies the GTE predicate on the "backend_class" field.
func BackendClassGTE(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldGTE(FieldBackendClass, v))
}

// BackendClassLT applies the LT predicate on the "backend_class" field.
func BackendClassLT(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldLT(FieldBackendClass, v))
}

// BackendClassLTE applies the LTE predicate on the "backend_class" field.
func BackendClassLTE(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldLTE(FieldBackendClass, v))
}

// BackendClassContains applies the Contains predicate on the "backend_class" field.
func BackendClassContains(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldContains(FieldBackendClass, v))
}

// BackendClassHasPrefix applies the HasPrefix predicate on the "backend_class" field.
func BackendClassHasPrefix(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldHasPrefix(FieldBackendClass, v))
}

// BackendClassHasSuffix applies the HasSuffix predicate on the "backend_class" field.
func BackendClassHasSuffix(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldHasSuffix(FieldBackendClass, v))
}

// BackendClassEqualFold applies the EqualFold predicate on the "backend_class" field.
func BackendClassEqualFold(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEqualFold(FieldBackendClass, v))
}

// BackendClassContainsFold applies the ContainsFold predicate on the "backend_class" field.
func BackendClassContainsFold(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldContainsFold(FieldBackendClass, v))
}

// BackendTypeEQ applies the EQ predicate on the "backend_type" field.
func BackendTypeEQ(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldBackendType, v))
}

// BackendTypeNEQ applies the NEQ predicate on the "backend_type" field.
func BackendTypeNEQ(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldNEQ(FieldBackendType, v))
}

// BackendTypeIn applies the In predicate on the "backend_type" field.
func BackendTypeIn(vs ...string) predicate.Attribute {
	return predicate.Attribute(sql.FieldIn(FieldBackendType, vs...))
}

// BackendTypeNotIn applies the NotIn predicate on the "backend_type" field.
func BackendTypeNotIn(vs ...string) predicate.Attribute {
	return predicate.Attribute(sql.FieldNotIn(FieldBackendType, vs...))
}

// BackendTypeGT applies the GT predicate on the "backend_type" field.
func BackendTypeGT(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldGT(FieldBackendType, v))
}

// BackendTypeGTE applies the GTE predicate on the "backend_type" field.
func BackendTypeGTE(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldGTE(FieldBackendType, v))
}

// BackendTypeLT applies the LT predicate on the "backend_type" field.
func BackendTypeLT(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldLT(FieldBackendType, v))
}

// BackendTypeLTE applies the LTE predicate on the "backend_type" field.
func BackendTypeLTE(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldLTE(FieldBackendType, v))
}

// BackendTypeContains applies the Contains predicate on the "backend_type" field.
func BackendTypeContains(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldContains(FieldBackendType, v))
}

// BackendTypeHasPrefix applies the HasPrefix predicate on the "backend_type" field.
func BackendTypeHasPrefix(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldHasPrefix(FieldBackendType, v))
}

// BackendTypeHasSuffix applies the HasSuffix predicate on the "backend_type" field.
func BackendTypeHasSuffix(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldHasSuffix(FieldBackendType, v))
}

// BackendTypeEqualFold applies the EqualFold predicate on the "backend_type" field.
func BackendTypeEqualFold(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEqualFold(FieldBackendType, v))
}

// BackendTypeContainsFold applies the ContainsFold predicate on the "backend_type" field.
func BackendTypeContainsFold(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldContainsFold(FieldBackendType, v))
}

// BackendTableEQ applies the EQ predicate on the "backend_table" field.
func BackendTableEQ(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldBackendTable, v))
}

// BackendTableNEQ applies the NEQ predicate on the "backend_table" field.
func BackendTableNEQ(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldNEQ(FieldBackendTable, v))
}

// BackendTableIn applies the In predicate on the "backend_table" field.
func BackendTableIn(vs ...string) predicate.Attribute {
	return predicate.Attribute(sql.FieldIn(FieldBackendTable, vs...))
}

// BackendTableNotIn applies the NotIn predicate on the "backend_table" field.
func BackendTableNotIn(vs ...string) predicate.Attribute {
	return predicate.Attribute(sql.FieldNotIn(FieldBackendTable, vs...))
}

// BackendTableGT applies the GT predicate on the "backend_table" field.
func BackendTableGT(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldGT(FieldBackendTable, v))
}

// BackendTableGTE applies the GTE predicate on the "backend_table" field.
func BackendTableGTE(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldGTE(FieldBackendTable, v))
}

// BackendTableLT applies the LT predicate on the "backend_table" field.
func BackendTableLT(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldLT(FieldBackendTable, v))
}

// BackendTableLTE applies the LTE predicate on the "backend_table" field.
func BackendTableLTE(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldLTE(FieldBackendTable, v))
}

// BackendTableContains applies the Contains predicate on the "backend_table" field.
func BackendTableContains(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldContains(FieldBackendTable, v))
}

// BackendTableHasPrefix applies the HasPrefix predicate on the "backend_table" field.
func BackendTableHasPrefix(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldHasPrefix(FieldBackendTable, v))
}

// BackendTableHasSuffix applies the HasSuffix predicate on the "backend_table" field.
func BackendTableHasSuffix(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldHasSuffix(FieldBackendTable, v))
}

// BackendTableEqualFold applies the EqualFold predicate on the "backend_table" field.
func BackendTableEqualFold(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEqualFold(FieldBackendTable, v))
}

// BackendTableContainsFold applies the ContainsFold predicate on the "backend_table" field.
func BackendTableContainsFold(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldContainsFold(FieldBackendTable, v))
}

// FrontendClassEQ applies the EQ predicate on the "frontend_class" field.
func FrontendClassEQ(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldFrontendClass, v))
}

// FrontendClassNEQ applies the NEQ predicate on the "frontend_class" field.
func FrontendClassNEQ(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldNEQ(FieldFrontendClass, v))
}

// FrontendClassIn applies the In predicate on the "frontend_class" field.
func FrontendClassIn(vs ...string) predicate.Attribute {
	return predicate.Attribute(sql.FieldIn(FieldFrontendClass, vs...))
}

// FrontendClassNotIn applies the NotIn predicate on the "frontend_class" field.
func FrontendClassNotIn(vs ...string) predicate.Attribute {
	return predicate.Attribute(sql.FieldNotIn(FieldFrontendClass, vs...))
}

// FrontendClassGT applies the GT predicate on the "frontend_class" field.
func FrontendClassGT(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldGT(FieldFrontendClass, v))
}

// FrontendClassGTE applies the GTE predicate on the "frontend_class" field.
func FrontendClassGTE(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldGTE(FieldFrontendClass, v))
}

// FrontendClassLT applies the LT predicate on the "frontend_class" field.
func FrontendClassLT(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldLT(FieldFrontendClass, v))
}

// FrontendClassLTE applies the LTE predicate on the "frontend_class" field.
func FrontendClassLTE(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldLTE(FieldFrontendClass, v))
}

// FrontendClassContains applies the Contains predicate on the "frontend_class" field.
func FrontendClassContains(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldContains(FieldFrontendClass, v))
}

// FrontendClassHasPrefix applies the HasPrefix predicate on the "frontend_class" field.
func FrontendClassHasPrefix(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldHasPrefix(FieldFrontendClass, v))
}

// FrontendClassHasSuffix applies the HasSuffix predicate on the "frontend_class" field.
func FrontendClassHasSuffix(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldHasSuffix(FieldFrontendClass, v))
}

// FrontendClassEqualFold applies the EqualFold predicate on the "frontend_class" field.
func FrontendClassEqualFold(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEqualFold(FieldFrontendClass, v))
}

// FrontendClassContainsFold applies the ContainsFold predicate on the "frontend_class" field.
func FrontendClassContainsFold(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldContainsFold(FieldFrontendClass, v))
}

// FrontendTypeEQ applies the EQ predicate on the "frontend_type" field.
func FrontendTypeEQ(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldFrontendType, v))
}

// FrontendTypeNEQ applies the NEQ predicate on the "frontend_type" field.
func FrontendTypeNEQ(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldNEQ(FieldFrontendType, v))
}

// FrontendTypeIn applies the In predicate on the "frontend_type" field.
func FrontendTypeIn(vs ...string) predicate.Attribute {
	return predicate.Attribute(sql.FieldIn(FieldFrontendType, vs...))
}

// FrontendTypeNotIn applies the NotIn predicate on the "frontend_type" field.
func FrontendTypeNotIn(vs ...string) predicate.Attribute {
	return predicate.Attribute(sql.FieldNotIn(FieldFrontendType, vs...))
}

// FrontendTypeGT applies the GT predicate on the "frontend_type" field.
func FrontendTypeGT(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldGT(FieldFrontendType, v))
}

// FrontendTypeGTE applies the GTE predicate on the "frontend_type" field.
func FrontendTypeGTE(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldGTE(FieldFrontendType, v))
}

// FrontendTypeLT applies the LT predicate on the "frontend_type" field.
func FrontendTypeLT(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldLT(FieldFrontendType, v))
}

// FrontendTypeLTE applies the LTE predicate on the "frontend_type" field.
func FrontendTypeLTE(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldLTE(FieldFrontendType, v))
}

// FrontendTypeContains applies the Contains predicate on the "frontend_type" field.
func FrontendTypeContains(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldContains(FieldFrontendType, v))
}

// FrontendTypeHasPrefix applies the HasPrefix predicate on the "frontend_type" field.
func FrontendTypeHasPrefix(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldHasPrefix(FieldFrontendType, v))
}

// FrontendTypeHasSuffix applies the HasSuffix predicate on the "frontend_type" field.
func FrontendTypeHasSuffix(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldHasSuffix(FieldFrontendType, v))
}

// FrontendTypeEqualFold applies the EqualFold predicate on the "frontend_type" field.
func FrontendTypeEqualFold(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEqualFold(FieldFrontendType, v))
}

// FrontendTypeContainsFold applies the ContainsFold predicate on the "frontend_type" field.
func FrontendTypeContainsFold(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldContainsFold(FieldFrontendType, v))
}

// FrontendLabelEQ applies the EQ predicate on the "frontend_label" field.
func FrontendLabelEQ(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldFrontendLabel, v))
}

// FrontendLabelNEQ applies the NEQ predicate on the "frontend_label" field.
func FrontendLabelNEQ(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldNEQ(FieldFrontendLabel, v))
}

// FrontendLabelIn applies the In predicate on the "frontend_label" field.
func FrontendLabelIn(vs ...string) predicate.Attribute {
	return predicate.Attribute(sql.FieldIn(FieldFrontendLabel, vs...))
}

// FrontendLabelNotIn applies the NotIn predicate on the "frontend_label" field.
func FrontendLabelNotIn(vs ...string) predicate.Attribute {
	return predicate.Attribute(sql.FieldNotIn(FieldFrontendLabel, vs...))
}

// FrontendLabelGT applies the GT predicate on the "frontend_label" field.
func FrontendLabelGT(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldGT(FieldFrontendLabel, v))
}

// FrontendLabelGTE applies the GTE predicate on the "frontend_label" field.
func FrontendLabelGTE(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldGTE(FieldFrontendLabel, v))
}

// FrontendLabelLT applies the LT predicate on the "frontend_label" field.
func FrontendLabelLT(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldLT(FieldFrontendLabel, v))
}

// FrontendLabelLTE applies the LTE predicate on the "frontend_label" field.
func FrontendLabelLTE(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldLTE(FieldFrontendLabel, v))
}

// FrontendLabelContains applies the Contains predicate on the "frontend_label" field.
func FrontendLabelContains(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldContains(FieldFrontendLabel, v))
}

// FrontendLabelHasPrefix applies the HasPrefix predicate on the "frontend_label" field.
func FrontendLabelHasPrefix(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldHasPrefix(FieldFrontendLabel, v))
}

// FrontendLabelHasSuffix applies the HasSuffix predicate on the "frontend_label" field.
func FrontendLabelHasSuffix(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldHasSuffix(FieldFrontendLabel, v))
}

// FrontendLabelEqualFold applies the EqualFold predicate on the "frontend_label" field.
func FrontendLabelEqualFold(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEqualFold(FieldFrontendLabel, v))
}

// FrontendLabelContainsFold applies the ContainsFold predicate on the "frontend_label" field.
func FrontendLabelContainsFold(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldContainsFold(FieldFrontendLabel, v))
}

// SourceClassEQ applies the EQ predicate on the "source_class" field.
func SourceClassEQ(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldSourceClass, v))
}

// SourceClassNEQ applies the NEQ predicate on the "source_class" field.
func SourceClassNEQ(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldNEQ(FieldSourceClass, v))
}

// SourceClassIn applies the In predicate on the "source_class" field.
func SourceClassIn(vs ...string) predicate.Attribute {
	return predicate.Attribute(sql.FieldIn(FieldSourceClass, vs...))
}

// SourceClassNotIn applies the NotIn predicate on the "source_class" field.
func SourceClassNotIn(vs ...string) predicate.Attribute {
	return predicate.Attribute(sql.FieldNotIn(FieldSourceClass, vs...))
}

// SourceClassGT applies the GT predicate on the "source_class" field.
func SourceClassGT(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldGT(FieldSourceClass, v))
}

// SourceClassGTE applies the GTE predicate on the "source_class" field.
func SourceClassGTE(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldGTE(FieldSourceClass, v))
}

// SourceClassLT applies the LT predicate on the "source_class" field.
func SourceClassLT(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldLT(FieldSourceClass, v))
}

// SourceClassLTE applies the LTE predicate on the "source_class" field.
func SourceClassLTE(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldLTE(FieldSourceClass, v))
}

// SourceClassContains applies the Contains predicate on the "source_class" field.
func SourceClassContains(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldContains(FieldSourceClass, v))
}

// SourceClassHasPrefix applies the HasPrefix predicate on the "source_class" field.
func SourceClassHasPrefix(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldHasPrefix(FieldSourceClass, v))
}

// SourceClassHasSuffix applies the HasSuffix predicate on the "source_class" field.
func SourceClassHasSuffix(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldHasSuffix(FieldSourceClass, v))
}

// SourceClassEqualFold applies the EqualFold predicate on the "source_class" field.
func SourceClassEqualFold(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEqualFold(FieldSourceClass, v))
}

// SourceClassContainsFold applies the ContainsFold predicate on the "source_class" field.
func SourceClassContainsFold(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldContainsFold(FieldSourceClass, v))
}

// DefaultValueEQ applies the EQ predicate on the "default_value" field.
func DefaultValueEQ(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldDefaultValue, v))
}

// DefaultValueNEQ applies the NEQ predicate on the "default_value" field.
func DefaultValueNEQ(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldNEQ(FieldDefaultValue, v))
}

// DefaultValueIn applies the In predicate on the "default_value" field.
func DefaultValueIn(vs ...string) predicate.Attribute {
	return predicate.Attribute(sql.FieldIn(FieldDefaultValue, vs...))
}

// DefaultValueNotIn applies the NotIn predicate on the "default_value" field.
func DefaultValueNotIn(vs ...string) predicate.Attribute {
	return predicate.Attribute(sql.FieldNotIn(FieldDefaultValue, vs...))
}

// DefaultValueGT applies the GT predicate on the "default_value" field.
func DefaultValueGT(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldGT(FieldDefaultValue, v))
}

// DefaultValueGTE applies the GTE predicate on the "default_value" field.
func DefaultValueGTE(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldGTE(FieldDefaultValue, v))
}

// DefaultValueLT applies the LT predicate on the "default_value" field.
func DefaultValueLT(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldLT(FieldDefaultValue, v))
}

// DefaultValueLTE applies the LTE predicate on the "default_value" field.
func DefaultValueLTE(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldLTE(FieldDefaultValue, v))
}

// DefaultValueContains applies the Contains predicate on the "default_value" field.
func DefaultValueContains(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldContains(FieldDefaultValue, v))
}

// DefaultValueHasPrefix applies the HasPrefix predicate on the "default_value" field.
func DefaultValueHasPrefix(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldHasPrefix(FieldDefaultValue, v))
}

// DefaultValueHasSuffix applies the HasSuffix predicate on the "default_value" field.
func DefaultValueHasSuffix(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldHasSuffix(FieldDefaultValue, v))
}

// DefaultValueEqualFold applies the EqualFold predicate on the "default_value" field.
func DefaultValueEqualFold(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEqualFold(FieldDefaultValue, v))
}

// DefaultValueContainsFold applies the ContainsFold predicate on the "default_value" field.
func DefaultValueContainsFold(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldContainsFold(FieldDefaultValue, v))
}

// IsFilterableEQ applies the EQ predicate on the "is_filterable" field.
func IsFilterableEQ(v uint8) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldIsFilterable, v))
}

// IsFilterableNEQ applies the NEQ predicate on the "is_filterable" field.
func IsFilterableNEQ(v uint8) predicate.Attribute {
	return predicate.Attribute(sql.FieldNEQ(FieldIsFilterable, v))
}

// IsFilterableIn applies the In predicate on the "is_filterable" field.
func IsFilterableIn(vs ...uint8) predicate.Attribute {
	return predicate.Attribute(sql.FieldIn(FieldIsFilterable, vs...))
}

// IsFilterableNotIn applies the NotIn predicate on the "is_filterable" field.
func IsFilterableNotIn(vs ...uint8) predicate.Attribute {
	return predicate.Attribute(sql.FieldNotIn(FieldIsFilterable, vs...))
}

// IsFilterableGT applies the GT predicate on the "is_filterable" field.
func IsFilterableGT(v uint8) predicate.Attribute {
	return predicate.Attribute(sql.FieldGT(FieldIsFilterable, v))
}

// IsFilterableGTE applies the GTE predicate on the "is_filterable" field.
func IsFilterableGTE(v uint8) predicate.Attribute {
	return predicate.Attribute(sql.FieldGTE(FieldIsFilterable, v))
}

// IsFilterableLT applies the LT predicate on the "is_filterable" field.
func IsFilterableLT(v uint8) predicate.Attribute {
	return predicate.Attribute(sql.FieldLT(FieldIsFilterable, v))
}

// IsFilterableLTE applies the LTE predicate on the "is_filterable" field.
func IsFilterableLTE(v uint8) predicate.Attribute {
	return predicate.Attribute(sql.FieldLTE(FieldIsFilterable, v))
}

// IsSearchableEQ applies the EQ predicate on the "is_searchable" field.
func IsSearchableEQ(v uint8) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldIsSearchable, v))
}

// IsSearchableNEQ applies the NEQ predicate on the "is_searchable" field.
func IsSearchableNEQ(v uint8) predicate.Attribute {
	return predicate.Attribute(sql.FieldNEQ(FieldIsSearchable, v))
}

// IsSearchableIn applies the In predicate on the "is_searchable" field.
func IsSearchableIn(vs ...uint8) predicate.Attribute {
	return predicate.Attribute(sql.FieldIn(FieldIsSearchable, vs...))
}

// IsSearchableNotIn applies the NotIn predicate on the "is_searchable" field.
func IsSearchableNotIn(vs ...uint8) predicate.Attribute {
	return predicate.Attribute(sql.FieldNotIn(FieldIsSearchable, vs...))
}

// IsSearchableGT applies the GT predicate on the "is_searchable" field.
func IsSearchableGT(v uint8) predicate.Attribute {
	return predicate.Attribute(sql.FieldGT(FieldIsSearchable, v))
}

// IsSearchableGTE applies the GTE predicate on the "is_searchable" field.
func IsSearchableGTE(v uint8) predicate.Attribute {
	return predicate.Attribute(sql.FieldGTE(FieldIsSearchable, v))
}

// IsSearchableLT applies the LT predicate on the "is_searchable" field.
func IsSearchableLT(v uint8) predicate.Attribute {
	return predicate.Attribute(sql.FieldLT(FieldIsSearchable, v))
}

// IsSearchableLTE applies the LTE predicate on the "is_searchable" field.
func IsSearchableLTE(v uint8) predicate.Attribute {
	return predicate.Attribute(sql.FieldLTE(FieldIsSearchable, v))
}

// IsRequiredEQ applies the EQ predicate on the "is_required" field.
func IsRequiredEQ(v uint8) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldIsRequired, v))
}

// IsRequiredNEQ applies the NEQ predicate on the "is_required" field.
func IsRequiredNEQ(v uint8) predicate.Attribute {
	return predicate.Attribute(sql.FieldNEQ(FieldIsRequired, v))
}

// IsRequiredIn applies the In predicate on the "is_required" field.
func IsRequiredIn(vs ...uint8) predicate.Attribute {
	return predicate.Attribute(sql.FieldIn(FieldIsRequired, vs...))
}

// IsRequiredNotIn applies the NotIn predicate on the "is_required" field.
func IsRequiredNotIn(vs ...uint8) predicate.Attribute {
	return predicate.Attribute(sql.FieldNotIn(FieldIsRequired, vs...))
}

// IsRequiredGT applies the GT predicate on the "is_required" field.
func IsRequiredGT(v uint8) predicate.Attribute {
	return predicate.Attribute(sql.FieldGT(FieldIsRequired, v))
}

// IsRequiredGTE applies the GTE predicate on the "is_required" field.
func IsRequiredGTE(v uint8) predicate.Attribute {
	return predicate.Attribute(sql.FieldGTE(FieldIsRequired, v))
}

// IsRequiredLT applies the LT predicate on the "is_required" field.
func IsRequiredLT(v uint8) predicate.Attribute {
	return predicate.Attribute(sql.FieldLT(FieldIsRequired, v))
}

// IsRequiredLTE applies the LTE predicate on the "is_required" field.
func IsRequiredLTE(v uint8) predicate.Attribute {
	return predicate.Attribute(sql.FieldLTE(FieldIsRequired, v))
}

// RequiredValidateClassEQ applies the EQ predicate on the "required_validate_class" field.
func RequiredValidateClassEQ(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldRequiredValidateClass, v))
}

// RequiredValidateClassNEQ applies the NEQ predicate on the "required_validate_class" field.
func RequiredValidateClassNEQ(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldNEQ(FieldRequiredValidateClass, v))
}

// RequiredValidateClassIn applies the In predicate on the "required_validate_class" field.
func RequiredValidateClassIn(vs ...string) predicate.Attribute {
	return predicate.Attribute(sql.FieldIn(FieldRequiredValidateClass, vs...))
}

// RequiredValidateClassNotIn applies the NotIn predicate on the "required_validate_class" field.
func RequiredValidateClassNotIn(vs ...string) predicate.Attribute {
	return predicate.Attribute(sql.FieldNotIn(FieldRequiredValidateClass, vs...))
}

// RequiredValidateClassGT applies the GT predicate on the "required_validate_class" field.
func RequiredValidateClassGT(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldGT(FieldRequiredValidateClass, v))
}

// RequiredValidateClassGTE applies the GTE predicate on the "required_validate_class" field.
func RequiredValidateClassGTE(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldGTE(FieldRequiredValidateClass, v))
}

// RequiredValidateClassLT applies the LT predicate on the "required_validate_class" field.
func RequiredValidateClassLT(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldLT(FieldRequiredValidateClass, v))
}

// RequiredValidateClassLTE applies the LTE predicate on the "required_validate_class" field.
func RequiredValidateClassLTE(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldLTE(FieldRequiredValidateClass, v))
}

// RequiredValidateClassContains applies the Contains predicate on the "required_validate_class" field.
func RequiredValidateClassContains(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldContains(FieldRequiredValidateClass, v))
}

// RequiredValidateClassHasPrefix applies the HasPrefix predicate on the "required_validate_class" field.
func RequiredValidateClassHasPrefix(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldHasPrefix(FieldRequiredValidateClass, v))
}

// RequiredValidateClassHasSuffix applies the HasSuffix predicate on the "required_validate_class" field.
func RequiredValidateClassHasSuffix(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldHasSuffix(FieldRequiredValidateClass, v))
}

// RequiredValidateClassEqualFold applies the EqualFold predicate on the "required_validate_class" field.
func RequiredValidateClassEqualFold(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEqualFold(FieldRequiredValidateClass, v))
}

// RequiredValidateClassContainsFold applies the ContainsFold predicate on the "required_validate_class" field.
func RequiredValidateClassContainsFold(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldContainsFold(FieldRequiredValidateClass, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Attribute) predicate.Attribute {
	return predicate.Attribute(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Attribute) predicate.Attribute {
	return predicate.Attribute(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Attribute) predicate.Attribute {
	return predicate.Attribute(func(s *sql.Selector) {
		p(s.Not())
	})
}
