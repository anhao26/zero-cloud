// Code generated by ent, DO NOT EDIT.

package entityattribute

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the entityattribute type in the database.
	Label = "entity_attribute"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldAttributeID holds the string denoting the attribute_id field in the database.
	FieldAttributeID = "attribute_id"
	// FieldEntityID holds the string denoting the entity_id field in the database.
	FieldEntityID = "entity_id"
	// FieldAttributeSetID holds the string denoting the attribute_set_id field in the database.
	FieldAttributeSetID = "attribute_set_id"
	// FieldAttributeGroupID holds the string denoting the attribute_group_id field in the database.
	FieldAttributeGroupID = "attribute_group_id"
	// FieldSequence holds the string denoting the sequence field in the database.
	FieldSequence = "sequence"
	// Table holds the table name of the entityattribute in the database.
	Table = "entity_attributes"
)

// Columns holds all SQL columns for entityattribute fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldAttributeID,
	FieldEntityID,
	FieldAttributeSetID,
	FieldAttributeGroupID,
	FieldSequence,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the EntityAttribute queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByAttributeID orders the results by the attribute_id field.
func ByAttributeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttributeID, opts...).ToFunc()
}

// ByEntityID orders the results by the entity_id field.
func ByEntityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntityID, opts...).ToFunc()
}

// ByAttributeSetID orders the results by the attribute_set_id field.
func ByAttributeSetID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttributeSetID, opts...).ToFunc()
}

// ByAttributeGroupID orders the results by the attribute_group_id field.
func ByAttributeGroupID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttributeGroupID, opts...).ToFunc()
}

// BySequence orders the results by the sequence field.
func BySequence(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSequence, opts...).ToFunc()
}
