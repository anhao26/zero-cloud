// Code generated by goctl. DO NOT EDIT.
// Source: ticket.proto

package server

import (
	"context"

	"github.com/anhao26/zero-cloud/service/ticket/ticket-rpc/internal/logic/attribute"
	"github.com/anhao26/zero-cloud/service/ticket/ticket-rpc/internal/logic/attributegroup"
	"github.com/anhao26/zero-cloud/service/ticket/ticket-rpc/internal/logic/attributeoption"
	"github.com/anhao26/zero-cloud/service/ticket/ticket-rpc/internal/logic/attributeset"
	"github.com/anhao26/zero-cloud/service/ticket/ticket-rpc/internal/logic/base"
	"github.com/anhao26/zero-cloud/service/ticket/ticket-rpc/internal/logic/entity"
	"github.com/anhao26/zero-cloud/service/ticket/ticket-rpc/internal/logic/entityattribute"
	"github.com/anhao26/zero-cloud/service/ticket/ticket-rpc/internal/svc"
	"github.com/anhao26/zero-cloud/service/ticket/ticket-rpc/types/ticket"
)

type TicketServer struct {
	svcCtx *svc.ServiceContext
	ticket.UnimplementedTicketServer
}

func NewTicketServer(svcCtx *svc.ServiceContext) *TicketServer {
	return &TicketServer{
		svcCtx: svcCtx,
	}
}

// Attribute management
func (s *TicketServer) CreateAttribute(ctx context.Context, in *ticket.AttributeInfo) (*ticket.BaseIDResp, error) {
	l := attribute.NewCreateAttributeLogic(ctx, s.svcCtx)
	return l.CreateAttribute(in)
}

func (s *TicketServer) UpdateAttribute(ctx context.Context, in *ticket.AttributeInfo) (*ticket.BaseResp, error) {
	l := attribute.NewUpdateAttributeLogic(ctx, s.svcCtx)
	return l.UpdateAttribute(in)
}

func (s *TicketServer) GetAttributeList(ctx context.Context, in *ticket.AttributeListReq) (*ticket.AttributeListResp, error) {
	l := attribute.NewGetAttributeListLogic(ctx, s.svcCtx)
	return l.GetAttributeList(in)
}

func (s *TicketServer) GetAttributeById(ctx context.Context, in *ticket.IDReq) (*ticket.AttributeInfo, error) {
	l := attribute.NewGetAttributeByIdLogic(ctx, s.svcCtx)
	return l.GetAttributeById(in)
}

func (s *TicketServer) DeleteAttribute(ctx context.Context, in *ticket.IDsReq) (*ticket.BaseResp, error) {
	l := attribute.NewDeleteAttributeLogic(ctx, s.svcCtx)
	return l.DeleteAttribute(in)
}

// AttributeGroup management
func (s *TicketServer) CreateAttributeGroup(ctx context.Context, in *ticket.AttributeGroupInfo) (*ticket.BaseIDResp, error) {
	l := attributegroup.NewCreateAttributeGroupLogic(ctx, s.svcCtx)
	return l.CreateAttributeGroup(in)
}

func (s *TicketServer) UpdateAttributeGroup(ctx context.Context, in *ticket.AttributeGroupInfo) (*ticket.BaseResp, error) {
	l := attributegroup.NewUpdateAttributeGroupLogic(ctx, s.svcCtx)
	return l.UpdateAttributeGroup(in)
}

func (s *TicketServer) GetAttributeGroupList(ctx context.Context, in *ticket.AttributeGroupListReq) (*ticket.AttributeGroupListResp, error) {
	l := attributegroup.NewGetAttributeGroupListLogic(ctx, s.svcCtx)
	return l.GetAttributeGroupList(in)
}

func (s *TicketServer) GetAttributeGroupById(ctx context.Context, in *ticket.IDReq) (*ticket.AttributeGroupInfo, error) {
	l := attributegroup.NewGetAttributeGroupByIdLogic(ctx, s.svcCtx)
	return l.GetAttributeGroupById(in)
}

func (s *TicketServer) DeleteAttributeGroup(ctx context.Context, in *ticket.IDsReq) (*ticket.BaseResp, error) {
	l := attributegroup.NewDeleteAttributeGroupLogic(ctx, s.svcCtx)
	return l.DeleteAttributeGroup(in)
}

// AttributeOption management
func (s *TicketServer) CreateAttributeOption(ctx context.Context, in *ticket.AttributeOptionInfo) (*ticket.BaseIDResp, error) {
	l := attributeoption.NewCreateAttributeOptionLogic(ctx, s.svcCtx)
	return l.CreateAttributeOption(in)
}

func (s *TicketServer) UpdateAttributeOption(ctx context.Context, in *ticket.AttributeOptionInfo) (*ticket.BaseResp, error) {
	l := attributeoption.NewUpdateAttributeOptionLogic(ctx, s.svcCtx)
	return l.UpdateAttributeOption(in)
}

func (s *TicketServer) GetAttributeOptionList(ctx context.Context, in *ticket.AttributeOptionListReq) (*ticket.AttributeOptionListResp, error) {
	l := attributeoption.NewGetAttributeOptionListLogic(ctx, s.svcCtx)
	return l.GetAttributeOptionList(in)
}

func (s *TicketServer) GetAttributeOptionById(ctx context.Context, in *ticket.IDReq) (*ticket.AttributeOptionInfo, error) {
	l := attributeoption.NewGetAttributeOptionByIdLogic(ctx, s.svcCtx)
	return l.GetAttributeOptionById(in)
}

func (s *TicketServer) DeleteAttributeOption(ctx context.Context, in *ticket.IDsReq) (*ticket.BaseResp, error) {
	l := attributeoption.NewDeleteAttributeOptionLogic(ctx, s.svcCtx)
	return l.DeleteAttributeOption(in)
}

// AttributeSet management
func (s *TicketServer) CreateAttributeSet(ctx context.Context, in *ticket.AttributeSetInfo) (*ticket.BaseIDResp, error) {
	l := attributeset.NewCreateAttributeSetLogic(ctx, s.svcCtx)
	return l.CreateAttributeSet(in)
}

func (s *TicketServer) UpdateAttributeSet(ctx context.Context, in *ticket.AttributeSetInfo) (*ticket.BaseResp, error) {
	l := attributeset.NewUpdateAttributeSetLogic(ctx, s.svcCtx)
	return l.UpdateAttributeSet(in)
}

func (s *TicketServer) GetAttributeSetList(ctx context.Context, in *ticket.AttributeSetListReq) (*ticket.AttributeSetListResp, error) {
	l := attributeset.NewGetAttributeSetListLogic(ctx, s.svcCtx)
	return l.GetAttributeSetList(in)
}

func (s *TicketServer) GetAttributeSetById(ctx context.Context, in *ticket.IDReq) (*ticket.AttributeSetInfo, error) {
	l := attributeset.NewGetAttributeSetByIdLogic(ctx, s.svcCtx)
	return l.GetAttributeSetById(in)
}

func (s *TicketServer) DeleteAttributeSet(ctx context.Context, in *ticket.IDsReq) (*ticket.BaseResp, error) {
	l := attributeset.NewDeleteAttributeSetLogic(ctx, s.svcCtx)
	return l.DeleteAttributeSet(in)
}

func (s *TicketServer) InitDatabase(ctx context.Context, in *ticket.Empty) (*ticket.BaseResp, error) {
	l := base.NewInitDatabaseLogic(ctx, s.svcCtx)
	return l.InitDatabase(in)
}

// Entity management
func (s *TicketServer) CreateEntity(ctx context.Context, in *ticket.EntityInfo) (*ticket.BaseIDResp, error) {
	l := entity.NewCreateEntityLogic(ctx, s.svcCtx)
	return l.CreateEntity(in)
}

func (s *TicketServer) UpdateEntity(ctx context.Context, in *ticket.EntityInfo) (*ticket.BaseResp, error) {
	l := entity.NewUpdateEntityLogic(ctx, s.svcCtx)
	return l.UpdateEntity(in)
}

func (s *TicketServer) GetEntityList(ctx context.Context, in *ticket.EntityListReq) (*ticket.EntityListResp, error) {
	l := entity.NewGetEntityListLogic(ctx, s.svcCtx)
	return l.GetEntityList(in)
}

func (s *TicketServer) GetEntityById(ctx context.Context, in *ticket.IDReq) (*ticket.EntityInfo, error) {
	l := entity.NewGetEntityByIdLogic(ctx, s.svcCtx)
	return l.GetEntityById(in)
}

func (s *TicketServer) DeleteEntity(ctx context.Context, in *ticket.IDsReq) (*ticket.BaseResp, error) {
	l := entity.NewDeleteEntityLogic(ctx, s.svcCtx)
	return l.DeleteEntity(in)
}

// EntityAttribute management
func (s *TicketServer) CreateEntityAttribute(ctx context.Context, in *ticket.EntityAttributeInfo) (*ticket.BaseIDResp, error) {
	l := entityattribute.NewCreateEntityAttributeLogic(ctx, s.svcCtx)
	return l.CreateEntityAttribute(in)
}

func (s *TicketServer) UpdateEntityAttribute(ctx context.Context, in *ticket.EntityAttributeInfo) (*ticket.BaseResp, error) {
	l := entityattribute.NewUpdateEntityAttributeLogic(ctx, s.svcCtx)
	return l.UpdateEntityAttribute(in)
}

func (s *TicketServer) GetEntityAttributeList(ctx context.Context, in *ticket.EntityAttributeListReq) (*ticket.EntityAttributeListResp, error) {
	l := entityattribute.NewGetEntityAttributeListLogic(ctx, s.svcCtx)
	return l.GetEntityAttributeList(in)
}

func (s *TicketServer) GetEntityAttributeById(ctx context.Context, in *ticket.IDReq) (*ticket.EntityAttributeInfo, error) {
	l := entityattribute.NewGetEntityAttributeByIdLogic(ctx, s.svcCtx)
	return l.GetEntityAttributeById(in)
}

func (s *TicketServer) DeleteEntityAttribute(ctx context.Context, in *ticket.IDsReq) (*ticket.BaseResp, error) {
	l := entityattribute.NewDeleteEntityAttributeLogic(ctx, s.svcCtx)
	return l.DeleteEntityAttribute(in)
}
