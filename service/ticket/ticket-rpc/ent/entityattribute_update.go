// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/anhao26/zero-cloud/service/ticket/ticket-rpc/ent/entityattribute"
	"github.com/anhao26/zero-cloud/service/ticket/ticket-rpc/ent/predicate"
)

// EntityAttributeUpdate is the builder for updating EntityAttribute entities.
type EntityAttributeUpdate struct {
	config
	hooks    []Hook
	mutation *EntityAttributeMutation
}

// Where appends a list predicates to the EntityAttributeUpdate builder.
func (eau *EntityAttributeUpdate) Where(ps ...predicate.EntityAttribute) *EntityAttributeUpdate {
	eau.mutation.Where(ps...)
	return eau
}

// SetUpdatedAt sets the "updated_at" field.
func (eau *EntityAttributeUpdate) SetUpdatedAt(t time.Time) *EntityAttributeUpdate {
	eau.mutation.SetUpdatedAt(t)
	return eau
}

// SetAttributeID sets the "attribute_id" field.
func (eau *EntityAttributeUpdate) SetAttributeID(u uint64) *EntityAttributeUpdate {
	eau.mutation.ResetAttributeID()
	eau.mutation.SetAttributeID(u)
	return eau
}

// AddAttributeID adds u to the "attribute_id" field.
func (eau *EntityAttributeUpdate) AddAttributeID(u int64) *EntityAttributeUpdate {
	eau.mutation.AddAttributeID(u)
	return eau
}

// SetEntityID sets the "entity_id" field.
func (eau *EntityAttributeUpdate) SetEntityID(u uint64) *EntityAttributeUpdate {
	eau.mutation.ResetEntityID()
	eau.mutation.SetEntityID(u)
	return eau
}

// AddEntityID adds u to the "entity_id" field.
func (eau *EntityAttributeUpdate) AddEntityID(u int64) *EntityAttributeUpdate {
	eau.mutation.AddEntityID(u)
	return eau
}

// SetAttributeSetID sets the "attribute_set_id" field.
func (eau *EntityAttributeUpdate) SetAttributeSetID(u uint64) *EntityAttributeUpdate {
	eau.mutation.ResetAttributeSetID()
	eau.mutation.SetAttributeSetID(u)
	return eau
}

// AddAttributeSetID adds u to the "attribute_set_id" field.
func (eau *EntityAttributeUpdate) AddAttributeSetID(u int64) *EntityAttributeUpdate {
	eau.mutation.AddAttributeSetID(u)
	return eau
}

// SetAttributeGroupID sets the "attribute_group_id" field.
func (eau *EntityAttributeUpdate) SetAttributeGroupID(u uint64) *EntityAttributeUpdate {
	eau.mutation.ResetAttributeGroupID()
	eau.mutation.SetAttributeGroupID(u)
	return eau
}

// AddAttributeGroupID adds u to the "attribute_group_id" field.
func (eau *EntityAttributeUpdate) AddAttributeGroupID(u int64) *EntityAttributeUpdate {
	eau.mutation.AddAttributeGroupID(u)
	return eau
}

// SetSequence sets the "sequence" field.
func (eau *EntityAttributeUpdate) SetSequence(u uint8) *EntityAttributeUpdate {
	eau.mutation.ResetSequence()
	eau.mutation.SetSequence(u)
	return eau
}

// AddSequence adds u to the "sequence" field.
func (eau *EntityAttributeUpdate) AddSequence(u int8) *EntityAttributeUpdate {
	eau.mutation.AddSequence(u)
	return eau
}

// Mutation returns the EntityAttributeMutation object of the builder.
func (eau *EntityAttributeUpdate) Mutation() *EntityAttributeMutation {
	return eau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eau *EntityAttributeUpdate) Save(ctx context.Context) (int, error) {
	eau.defaults()
	return withHooks(ctx, eau.sqlSave, eau.mutation, eau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eau *EntityAttributeUpdate) SaveX(ctx context.Context) int {
	affected, err := eau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eau *EntityAttributeUpdate) Exec(ctx context.Context) error {
	_, err := eau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eau *EntityAttributeUpdate) ExecX(ctx context.Context) {
	if err := eau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eau *EntityAttributeUpdate) defaults() {
	if _, ok := eau.mutation.UpdatedAt(); !ok {
		v := entityattribute.UpdateDefaultUpdatedAt()
		eau.mutation.SetUpdatedAt(v)
	}
}

func (eau *EntityAttributeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(entityattribute.Table, entityattribute.Columns, sqlgraph.NewFieldSpec(entityattribute.FieldID, field.TypeUint64))
	if ps := eau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eau.mutation.UpdatedAt(); ok {
		_spec.SetField(entityattribute.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := eau.mutation.AttributeID(); ok {
		_spec.SetField(entityattribute.FieldAttributeID, field.TypeUint64, value)
	}
	if value, ok := eau.mutation.AddedAttributeID(); ok {
		_spec.AddField(entityattribute.FieldAttributeID, field.TypeUint64, value)
	}
	if value, ok := eau.mutation.EntityID(); ok {
		_spec.SetField(entityattribute.FieldEntityID, field.TypeUint64, value)
	}
	if value, ok := eau.mutation.AddedEntityID(); ok {
		_spec.AddField(entityattribute.FieldEntityID, field.TypeUint64, value)
	}
	if value, ok := eau.mutation.AttributeSetID(); ok {
		_spec.SetField(entityattribute.FieldAttributeSetID, field.TypeUint64, value)
	}
	if value, ok := eau.mutation.AddedAttributeSetID(); ok {
		_spec.AddField(entityattribute.FieldAttributeSetID, field.TypeUint64, value)
	}
	if value, ok := eau.mutation.AttributeGroupID(); ok {
		_spec.SetField(entityattribute.FieldAttributeGroupID, field.TypeUint64, value)
	}
	if value, ok := eau.mutation.AddedAttributeGroupID(); ok {
		_spec.AddField(entityattribute.FieldAttributeGroupID, field.TypeUint64, value)
	}
	if value, ok := eau.mutation.Sequence(); ok {
		_spec.SetField(entityattribute.FieldSequence, field.TypeUint8, value)
	}
	if value, ok := eau.mutation.AddedSequence(); ok {
		_spec.AddField(entityattribute.FieldSequence, field.TypeUint8, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entityattribute.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eau.mutation.done = true
	return n, nil
}

// EntityAttributeUpdateOne is the builder for updating a single EntityAttribute entity.
type EntityAttributeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EntityAttributeMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (eauo *EntityAttributeUpdateOne) SetUpdatedAt(t time.Time) *EntityAttributeUpdateOne {
	eauo.mutation.SetUpdatedAt(t)
	return eauo
}

// SetAttributeID sets the "attribute_id" field.
func (eauo *EntityAttributeUpdateOne) SetAttributeID(u uint64) *EntityAttributeUpdateOne {
	eauo.mutation.ResetAttributeID()
	eauo.mutation.SetAttributeID(u)
	return eauo
}

// AddAttributeID adds u to the "attribute_id" field.
func (eauo *EntityAttributeUpdateOne) AddAttributeID(u int64) *EntityAttributeUpdateOne {
	eauo.mutation.AddAttributeID(u)
	return eauo
}

// SetEntityID sets the "entity_id" field.
func (eauo *EntityAttributeUpdateOne) SetEntityID(u uint64) *EntityAttributeUpdateOne {
	eauo.mutation.ResetEntityID()
	eauo.mutation.SetEntityID(u)
	return eauo
}

// AddEntityID adds u to the "entity_id" field.
func (eauo *EntityAttributeUpdateOne) AddEntityID(u int64) *EntityAttributeUpdateOne {
	eauo.mutation.AddEntityID(u)
	return eauo
}

// SetAttributeSetID sets the "attribute_set_id" field.
func (eauo *EntityAttributeUpdateOne) SetAttributeSetID(u uint64) *EntityAttributeUpdateOne {
	eauo.mutation.ResetAttributeSetID()
	eauo.mutation.SetAttributeSetID(u)
	return eauo
}

// AddAttributeSetID adds u to the "attribute_set_id" field.
func (eauo *EntityAttributeUpdateOne) AddAttributeSetID(u int64) *EntityAttributeUpdateOne {
	eauo.mutation.AddAttributeSetID(u)
	return eauo
}

// SetAttributeGroupID sets the "attribute_group_id" field.
func (eauo *EntityAttributeUpdateOne) SetAttributeGroupID(u uint64) *EntityAttributeUpdateOne {
	eauo.mutation.ResetAttributeGroupID()
	eauo.mutation.SetAttributeGroupID(u)
	return eauo
}

// AddAttributeGroupID adds u to the "attribute_group_id" field.
func (eauo *EntityAttributeUpdateOne) AddAttributeGroupID(u int64) *EntityAttributeUpdateOne {
	eauo.mutation.AddAttributeGroupID(u)
	return eauo
}

// SetSequence sets the "sequence" field.
func (eauo *EntityAttributeUpdateOne) SetSequence(u uint8) *EntityAttributeUpdateOne {
	eauo.mutation.ResetSequence()
	eauo.mutation.SetSequence(u)
	return eauo
}

// AddSequence adds u to the "sequence" field.
func (eauo *EntityAttributeUpdateOne) AddSequence(u int8) *EntityAttributeUpdateOne {
	eauo.mutation.AddSequence(u)
	return eauo
}

// Mutation returns the EntityAttributeMutation object of the builder.
func (eauo *EntityAttributeUpdateOne) Mutation() *EntityAttributeMutation {
	return eauo.mutation
}

// Where appends a list predicates to the EntityAttributeUpdate builder.
func (eauo *EntityAttributeUpdateOne) Where(ps ...predicate.EntityAttribute) *EntityAttributeUpdateOne {
	eauo.mutation.Where(ps...)
	return eauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eauo *EntityAttributeUpdateOne) Select(field string, fields ...string) *EntityAttributeUpdateOne {
	eauo.fields = append([]string{field}, fields...)
	return eauo
}

// Save executes the query and returns the updated EntityAttribute entity.
func (eauo *EntityAttributeUpdateOne) Save(ctx context.Context) (*EntityAttribute, error) {
	eauo.defaults()
	return withHooks(ctx, eauo.sqlSave, eauo.mutation, eauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eauo *EntityAttributeUpdateOne) SaveX(ctx context.Context) *EntityAttribute {
	node, err := eauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eauo *EntityAttributeUpdateOne) Exec(ctx context.Context) error {
	_, err := eauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eauo *EntityAttributeUpdateOne) ExecX(ctx context.Context) {
	if err := eauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eauo *EntityAttributeUpdateOne) defaults() {
	if _, ok := eauo.mutation.UpdatedAt(); !ok {
		v := entityattribute.UpdateDefaultUpdatedAt()
		eauo.mutation.SetUpdatedAt(v)
	}
}

func (eauo *EntityAttributeUpdateOne) sqlSave(ctx context.Context) (_node *EntityAttribute, err error) {
	_spec := sqlgraph.NewUpdateSpec(entityattribute.Table, entityattribute.Columns, sqlgraph.NewFieldSpec(entityattribute.FieldID, field.TypeUint64))
	id, ok := eauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EntityAttribute.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entityattribute.FieldID)
		for _, f := range fields {
			if !entityattribute.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entityattribute.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eauo.mutation.UpdatedAt(); ok {
		_spec.SetField(entityattribute.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := eauo.mutation.AttributeID(); ok {
		_spec.SetField(entityattribute.FieldAttributeID, field.TypeUint64, value)
	}
	if value, ok := eauo.mutation.AddedAttributeID(); ok {
		_spec.AddField(entityattribute.FieldAttributeID, field.TypeUint64, value)
	}
	if value, ok := eauo.mutation.EntityID(); ok {
		_spec.SetField(entityattribute.FieldEntityID, field.TypeUint64, value)
	}
	if value, ok := eauo.mutation.AddedEntityID(); ok {
		_spec.AddField(entityattribute.FieldEntityID, field.TypeUint64, value)
	}
	if value, ok := eauo.mutation.AttributeSetID(); ok {
		_spec.SetField(entityattribute.FieldAttributeSetID, field.TypeUint64, value)
	}
	if value, ok := eauo.mutation.AddedAttributeSetID(); ok {
		_spec.AddField(entityattribute.FieldAttributeSetID, field.TypeUint64, value)
	}
	if value, ok := eauo.mutation.AttributeGroupID(); ok {
		_spec.SetField(entityattribute.FieldAttributeGroupID, field.TypeUint64, value)
	}
	if value, ok := eauo.mutation.AddedAttributeGroupID(); ok {
		_spec.AddField(entityattribute.FieldAttributeGroupID, field.TypeUint64, value)
	}
	if value, ok := eauo.mutation.Sequence(); ok {
		_spec.SetField(entityattribute.FieldSequence, field.TypeUint8, value)
	}
	if value, ok := eauo.mutation.AddedSequence(); ok {
		_spec.AddField(entityattribute.FieldSequence, field.TypeUint8, value)
	}
	_node = &EntityAttribute{config: eauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entityattribute.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eauo.mutation.done = true
	return _node, nil
}
