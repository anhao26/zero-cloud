// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/anhao26/zero-cloud/service/ticket/ticket-rpc/ent/entityattribute"
)

// EntityAttribute is the model entity for the EntityAttribute schema.
type EntityAttribute struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Attribute Id | 属性ID
	AttributeID uint64 `json:"attribute_id,omitempty"`
	// Entity Id | 实体ID
	EntityID uint64 `json:"entity_id,omitempty"`
	// Attribute Set Id | 属性集表ID
	AttributeSetID uint64 `json:"attribute_set_id,omitempty"`
	// Attribute Group Id | 属性组表ID
	AttributeGroupID uint64 `json:"attribute_group_id,omitempty"`
	// sequence | 顺序
	Sequence     uint8 `json:"sequence,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EntityAttribute) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case entityattribute.FieldID, entityattribute.FieldAttributeID, entityattribute.FieldEntityID, entityattribute.FieldAttributeSetID, entityattribute.FieldAttributeGroupID, entityattribute.FieldSequence:
			values[i] = new(sql.NullInt64)
		case entityattribute.FieldCreatedAt, entityattribute.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EntityAttribute fields.
func (ea *EntityAttribute) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case entityattribute.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ea.ID = uint64(value.Int64)
		case entityattribute.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ea.CreatedAt = value.Time
			}
		case entityattribute.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ea.UpdatedAt = value.Time
			}
		case entityattribute.FieldAttributeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attribute_id", values[i])
			} else if value.Valid {
				ea.AttributeID = uint64(value.Int64)
			}
		case entityattribute.FieldEntityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field entity_id", values[i])
			} else if value.Valid {
				ea.EntityID = uint64(value.Int64)
			}
		case entityattribute.FieldAttributeSetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attribute_set_id", values[i])
			} else if value.Valid {
				ea.AttributeSetID = uint64(value.Int64)
			}
		case entityattribute.FieldAttributeGroupID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attribute_group_id", values[i])
			} else if value.Valid {
				ea.AttributeGroupID = uint64(value.Int64)
			}
		case entityattribute.FieldSequence:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sequence", values[i])
			} else if value.Valid {
				ea.Sequence = uint8(value.Int64)
			}
		default:
			ea.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EntityAttribute.
// This includes values selected through modifiers, order, etc.
func (ea *EntityAttribute) Value(name string) (ent.Value, error) {
	return ea.selectValues.Get(name)
}

// Update returns a builder for updating this EntityAttribute.
// Note that you need to call EntityAttribute.Unwrap() before calling this method if this EntityAttribute
// was returned from a transaction, and the transaction was committed or rolled back.
func (ea *EntityAttribute) Update() *EntityAttributeUpdateOne {
	return NewEntityAttributeClient(ea.config).UpdateOne(ea)
}

// Unwrap unwraps the EntityAttribute entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ea *EntityAttribute) Unwrap() *EntityAttribute {
	_tx, ok := ea.config.driver.(*txDriver)
	if !ok {
		panic("ent: EntityAttribute is not a transactional entity")
	}
	ea.config.driver = _tx.drv
	return ea
}

// String implements the fmt.Stringer.
func (ea *EntityAttribute) String() string {
	var builder strings.Builder
	builder.WriteString("EntityAttribute(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ea.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ea.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ea.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("attribute_id=")
	builder.WriteString(fmt.Sprintf("%v", ea.AttributeID))
	builder.WriteString(", ")
	builder.WriteString("entity_id=")
	builder.WriteString(fmt.Sprintf("%v", ea.EntityID))
	builder.WriteString(", ")
	builder.WriteString("attribute_set_id=")
	builder.WriteString(fmt.Sprintf("%v", ea.AttributeSetID))
	builder.WriteString(", ")
	builder.WriteString("attribute_group_id=")
	builder.WriteString(fmt.Sprintf("%v", ea.AttributeGroupID))
	builder.WriteString(", ")
	builder.WriteString("sequence=")
	builder.WriteString(fmt.Sprintf("%v", ea.Sequence))
	builder.WriteByte(')')
	return builder.String()
}

// EntityAttributes is a parsable slice of EntityAttribute.
type EntityAttributes []*EntityAttribute
